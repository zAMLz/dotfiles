#+TITLE: Getting Things Done Framework
#+AUTHOR: Amlesh Sivanantham (zamlz)
#+ROAM_ALIAS: "GTD Framework" "GTD Method"
#+ROAM_TAGS: CONFIG SOFTWARE GTD
#+CREATED: [2021-03-27 Sat 09:04]
#+LAST_MODIFIED: [2021-06-14 Mon 07:34:43]

* Useful Resources
- [[https://hamberg.no/gtd][https://hamberg.no/gtd]]

* What is GTD?

GTD is an acronym for "Getting Things Done". It is a framework for managing tasks and projects.

This document covers how I use GTD. We configure this framework for [[file:../config/org_mode.org][Org-mode]] which really just provides a barebones system for implementnig any task management system. So, what I've ended up doing is not exactly "GTD", but it is a variation that better suits my workflow.

* Configuration
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/emacs/lisp/init-gtd.el :comments both :mkdirp yes
:END:

** Setup Dependencies
First let's make sure we pull in [[file:../config/org_mode.org][Org-mode]] as we build of it's provided system.

#+begin_src emacs-lisp
(require 'init-org)
#+end_src

** Task Management Workflow

#+begin_src plantuml :file ./data/gtd_workflow.png :exports results
@startuml
'hide footbox
skinparam backgroundcolor transparent
skinparam monochrome reverse
skinparam shadowing false
hide empty description

[*] -> TODO
[*] --> BACKLOG
BACKLOG -> TODO
BACKLOG -> CANCELLED
TODO -> DONE
TODO -> BLOCKED
TODO --> CANCELLED
BLOCKED -> TODO
BLOCKED -> DONE
BLOCKED --> CANCELLED
DONE -> [*]
ROUTINE -> ROUTINE
@enduml
#+end_src

#+RESULTS:
[[file:./data/gtd_workflow.png]]

We can define a workflow that achieves this with the following set of sequences for =org-todo-keywords=.

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "|" "DONE(d)")
        (sequence "|" "BACKLOG(b)")
        (sequence "|" "BLOCKED(B)")
        (sequence "|" "CANCELLED(c)")))
#+end_src

** Task State Face Customization
We make use of =doom-themes= built in functions to get the primary colors of the current theme we are using. This also means that we have to use a =doom-theme=.

#+begin_src emacs-lisp
(defun zamlz/configure-org-todo-keyword-faces ()
  (interactive)
  (message "Configure org todo keyword faces")
  (let
      ((black   (doom-color 'bg))
       (grey    (doom-color 'base1))
       (red     (doom-color 'red))
       (orange  (doom-color 'orange))
       (green   (doom-color 'green))
       (yellow  (doom-color 'yellow))
       (blue    (doom-color 'blue))
       (violet  (doom-color 'violet))
       (cyan    (doom-color 'cyan))
       (white   (doom-color 'white)))
    (setq org-todo-keyword-faces
          `(("TODO"      . (:weight bold :foreground ,black  :background ,red))
            ("BLOCKED"   . (:weight bold :foreground ,black  :background ,yellow))
            ("BACKLOG"   . (:weight bold :foreground ,black  :background ,violet))
            ("CANCELLED" . (:weight bold :foreground ,black :background ,grey))
            ("DONE"      . (:weight bold :foreground ,black  :background ,green))))))
#+end_src

We should call this function in order to set those colors.

#+begin_src emacs-lisp
(zamlz/configure-org-todo-keyword-faces)
#+end_src

** Track Habits
Enables habit tracking in =org-mode= via =org-habit=.

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (add-to-list 'org-modules 'org-habit t)
  (setq org-habit-graph-column 40)
  (setq org-habit-preceding-days 28)
  (setq org-habit-following-days 7)
  (setq org-habit-show-habits-only-for-today t)
  (setq org-habit-show-all-today t)
  (setq org-habit-show-done-always-green t))
#+end_src

** Feature Provide

#+begin_src emacs-lisp
(provide 'init-gtd)
#+end_src
