#+TITLE: GNU/Emacs
#+AUTHOR: Amlesh Sivanantham (zamlz)
#+ROAM_ALIAS:
#+ROAM_KEY: https://www.gnu.org/software/emacs/
#+ROAM_TAGS: CONFIG SOFTWARE EMACS
#+CREATED: [2021-03-27 Sat 00:17]
#+LAST_MODIFIED: [2021-05-11 Tue 09:24:57]
#+STARTUP: overview

#+DOWNLOADED: screenshot @ 2021-04-07 17:14:36
[[file:data/xkcd_378.png]]

/[[https://xkcd.com/378/][Real Programmers - Randall Munroe]]/

* Useful Resources

There are some cool configurations from other people that I've taken influence from for my own emacs configuration.

- [[https://config.daviwil.com/emacs][David Wilson's (System Crafters) Emacs Configuration]]
- [[https://pages.sachachua.com/.emacs.d/][Sasha Chau's Emacs Configuration]]
- [[https://tecosaur.github.io/emacs-config/config.html][Tecosaur's Doom Emacs Configuration]]
- [[https://config.phundrak.com/emacs][Phundrak's Emacs Configuration]]
- [[https://writequit.org/org/][WriteQuit's Dotfiles with Org]]
- [[https://protesilaos.com/dotemacs/][Protosilaos Stavrou's Dotfiles]]
- [[https://github.com/rememberYou/.emacs.d][rememberYou's Emacs Configuration]]

* Tips and Tricks
As I find things to write here, I'll put it in.

* Emacs Configuration
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/emacs/init.el :comments both :mkdirp yes
:END:
** Garbage Collector Hooks

Supposedly makes the startup a bit more effecient. We also revert the changes to the GC via a hook once the startup has completed.

#+begin_src emacs-lisp
(defvar file-name-handler-alist-original file-name-handler-alist)

(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6
      file-name-handler-alist nil
      site-run-file nil)

(defvar zamlz/gc-cons-threshold 100000000)

(add-hook 'emacs-startup-hook ; hook run after loading init files
          (lambda ()
            (setq gc-cons-threshold zamlz/gc-cons-threshold
                  gc-cons-percentage 0.1
                  file-name-handler-alist file-name-handler-alist-original)))

(add-hook 'minibuffer-setup-hook
          (lambda ()
            (setq gc-cons-threshold (* zamlz/gc-cons-threshold 2))))
(add-hook 'minibuffer-exit-hook
          (lambda ()
            (garbage-collect)
            (setq gc-cons-threshold zamlz/gc-cons-threshold)))
#+end_src

** Update Load Path

Optimize: Force =lisp= and =site-lisp= at the head to reduce the startup time.

#+begin_src emacs-lisp
(defun update-load-path (&rest _)
  "Update `load-path'."
  (dolist (dir '("site-lisp" "lisp"))
    (push (expand-file-name dir user-emacs-directory) load-path)))

(defun add-subdirs-to-load-path (&rest _)
  "Add subdirectories to `load-path'."
  (let ((default-directory (expand-file-name "site-lisp" user-emacs-directory)))
    (normal-top-level-add-subdirs-to-load-path)))

(advice-add #'package-initialize :after #'update-load-path)
(advice-add #'package-initialize :after #'add-subdirs-to-load-path)

(update-load-path)
#+end_src

Make sure to populate the =lisp= and =site-lisp= directories.

#+begin_src conf :tangle ~/.config/emacs/lisp/.keep :mkdirp yes
#PLACEHOLDER FILE FOR LISP DIR
#+end_src

#+begin_src conf :tangle ~/.config/emacs/site-lisp/.keep :mkdirp yes
#PLACEHOLDER FILE FOR SITE-LISP DIR
#+end_src

** Internal

#+begin_src emacs-lisp
(require 'init-package)
(require 'init-dired)
(require 'init-ibuffer)
#+end_src

*** Reorganize This
**** Basic Emacs Setup

Lets get some basic settings out of the way here.

#+begin_src emacs-lisp
(use-package emacs
  :preface
  ;; Setup personal preferances
  (defvar zamlz/indent-width 4)   ; tab size
  (defvar zamlz/default-screen-width 100)
  :custom
  ;; Configure personal information
  (user-full-name "Amlesh Sivanantham")
  (user-mail-address "zamlz@pm.me")
  (user-login-name "zamlz")
  ;; Other basic settings
  (ring-bell-function 'ignore) ; minimise distractio
  (frame-resize-pixelwise t)
  (default-directory "~/")
  :config
  ;; Set Environment Variables
  (setenv "PINENTRY_USER_DATA" "rofi")
  (setenv "VISUAL" "emacsclient --socket-name=xorg-emacs-daemon" )
  (setenv "EDITOR" (getenv "VISUAL"))
  ;; Configure Specific UI changes
  (tool-bar-mode -1)          ; Disable the toolbar
  (menu-bar-mode -1)          ; disable the menubar
  (set-fringe-mode 10)        ; Give some breathing room
  (blink-cursor-mode 1)       ; Let the cursor be blinking
  (semantic-mode 1)
  ;; (tooltip-mode -1)           ; Disable tooltips
  ;; Always use spaces for indentation
  (setq-default indent-tabs-mode nil
                tab-width zamlz/indent-width
                fill-column zamlz/default-screen-width))
#+end_src

**** Disable Default Startup

Original startup is hideous...

#+begin_src emacs-lisp
(use-package "startup"
  :ensure nil
  :custom (inhibit-startup-screen t))
#+end_src

**** Modernize Selection Behaviour

Replaces active region just by typing text.

#+begin_src emacs-lisp
(use-package delsel
  :ensure nil
  :config (delete-selection-mode +1))
#+end_src

**** Disable Scroll-Bar

#+begin_src emacs-lisp
(use-package scroll-bar
  :ensure nil
  :custom
  ;; better scrolling experience
  (scroll-margin 0)
  (scroll-conservatively 101) ; > 100
  (scroll-preserve-screen-position t)
  (auto-window-vscroll nil)
  :config
  ;; Don't display the scroll bar in buffers
  (scroll-bar-mode -1))
#+end_src

**** Enable Column Numbers

#+begin_src emacs-lisp
(use-package simple
  :ensure nil
  :config
  (column-number-mode +1)
  (global-display-line-numbers-mode t))

  ;; DONT display line numbers in certain modes
  (dolist (mode '(term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  vterm-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

**** Split and Follow Windows

#+begin_src emacs-lisp
(use-package "window"
  :ensure nil
  :preface
  (defun zamlz/split-and-follow-horizontally ()
    "Split window below."
    (interactive)
    (split-window-below)
    (other-window 1))
  (defun zamlz/split-and-follow-vertically ()
    "Split window right."
    (interactive)
    (split-window-right)
    (other-window 1))
  :config
  (global-set-key (kbd "C-x 2") #'zamlz/split-and-follow-horizontally)
  (global-set-key (kbd "C-x 3") #'zamlz/split-and-follow-vertically))
#+end_src

**** Backup and Autosave Files

Emacs decides to save backup files and lockfiles within the same directory as the files we are editing. Thats just ugly when looking at the filesystem. This will fix that.

   #+begin_src emacs-lisp
   (use-package files
     :ensure nil
     :custom
     (create-lockfiles nil) ; don't create .# files (crashes 'npm start')
     (backup-directory-alist `(("." . "~/.config/emacs/backup"))))
   #+end_src

**** Eldoc Documentation

Slightly shorten the Eldoc display delay

#+begin_src emacs-lisp
(use-package eldoc
  :ensure nil
  :diminish eldoc-mode
  :custom
  (eldoc-idle-delay 0.4))
#+end_src

**** Mouse Wheel Scroll Speed

#+begin_src emacs-lisp
(use-package mwheel
  :ensure nil
  :custom
  (mouse-wheel-scroll-amount '(2 ((shift) . 1)))
  (mouse-wheel-progressive-speed nil))
#+end_src

**** Highlight Matching Parentheses

#+begin_src emacs-lisp
(use-package paren
  :ensure nil
  :custom (show-paren-delay 0)
  :config (show-paren-mode +1))
#+end_src

**** Auto-pairing Quotes and Parentheses

Super useful for auto-pairing certain characters. However we should make use of a hook to prevent it for left carrot bracket in org-mode buffers

#+begin_src emacs-lisp
(use-package elec-pair
  :ensure nil
  :hook
  (prog-mode . electric-pair-mode)
  ;; disable <> auto-pairing in org-mode buffers
  (org-mode  . (lambda ()
    (setq-local electric-pair-inhibit-predicate
                `(lambda (c)
                   (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c)))))))
#+end_src

**** Clean Whitespace on Buffer Save

#+begin_src emacs-lisp
(use-package whitespace
  :ensure nil
  :hook (before-save . whitespace-cleanup))
#+end_src

**** Dump Custom-Set-Variables

#+begin_src emacs-lisp
(use-package cus-edit
  :ensure nil
  :custom (custom-file (concat user-emacs-directory "to-be-dumped.el")))
#+end_src

**** Easy PGP Assistant (EPA)

EPA is a built-in emacs package for interfacing with GnuPG.

#+begin_src emacs-lisp
(use-package epa-file
  :ensure nil
  :custom
  ;; Don't ask by default which key to use
  (epa-file-select-keys nil)
  ;; default to user mail address
  (epa-file-encrypt-to user-mail-address)
  ;; Set the pinentry mode to be loopback to gpg gets the password
  ;; through emacs instead of using pinentry.
  (epa-pinentry-mode 'loopback))
#+end_src

**** Auth Source Pass

The auth-source-pass package, formerly known as auth-password-store, integrates Emacs' auth-source library with password-store. The auth-source library is a way for Emacs to answer the old burning question “What are my user name and password?”. Password-store (or just pass) is a standard unix password manager following the Unix philosophy. More details can be found at [[https://github.com/DamienCassou/auth-source-pass][github:DamienCassou/auth-source-pass]].

#+begin_src emacs-lisp
(use-package auth-source-pass
  :ensure nil
  :init (auth-source-pass-enable))
#+end_src

**** Calc

#+begin_src emacs-lisp
(use-package calc
  :ensure nil
  :custom
  (calc-angle-mode 'rad)
  (calc-symbolic-mode t))
#+end_src

** keybinding Improvements

#+begin_src emacs-lisp
(require 'init-evil)
(require 'init-general)
(require 'init-hydra)
#+end_src

** Interface

#+begin_src emacs-lisp
(require 'init-ivy)
#+end_src

*** Reorganize This
**** Startup Dashboard

The default landing page isn't quite nice. I originally had it configured to display the scratch page, but then I really wanted like a menu to quickly access my stuff.

#+begin_src emacs-lisp
;; Enable custom dashboard
(use-package dashboard
  :ensure t
  :custom
  ;; (dashboard-startup-banner "~/org/config/lib/emacs-themes/navi.png")
  ;; (dashboard-startup-banner "~/org/config/lib/emacs-themes/black-hole.png")
  (dashboard-startup-banner "~/org/config/lib/emacs-themes/name.txt")
  (dashboard-center-content t)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-set-navigator t)
  (dashboard-set-init-info t)
  (initial-buffer-choice (lambda() (get-buffer "*dashboard*")))
  (dashboard-items '())
  :config
  (dashboard-modify-heading-icons '((bookmarks . "book")))
  (dashboard-setup-startup-hook))
#+end_src

**** Font Configuration

I have a lot of fonts commented out right now because I can't decide on which ones to keep lol.

#+begin_src emacs-lisp
(defun zamlz/set-font-faces ()
  (interactive)
  ;; Set default and fixed pitch face
  (dolist (face '(default fixed-pitch))
    (set-face-attribute `,face nil :font "Iosevka Term" :height 100))
  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "DejaVu Serif" :height 100))
#+end_src

**** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Wilfred/helpful]] improves the documentation shown when running one of emacs's =describe-*= functions.

#+begin_src emacs-lisp
(use-package helpful
  :after counsel
  :custom
  ; This is only needed if I'm still using counsel
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ;; Note that the built-in `describe-function' includes both functions
  ;; and macros. `helpful-function' is functions only, so we provide
  ;; `helpful-callable' as a drop-in replacement.
  ([remap describe-function] . helpful-callable)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key]      . helpful-key)
  ([remap describe-command]  . helpful-command)
  ("C-c C-d"                 . helpful-at-point)
  ("C-h F"                   . helpful-function)
  )
#+end_src

**** Themes and Appearance
***** Modeline

To use =Doom-Modeline=, we need to have some custom icons installed. However, they must be manually installed via the following command (=M-x all-the-icons-install-fonts=)

#+begin_src emacs-lisp
(use-package all-the-icons)

;; https://github.com/jerrypnz/.emacs.d/blob/master/lisp/jp-icons.el
(defun with-faicon (icon str &optional height v-adjust)
  (s-concat (all-the-icons-faicon icon :v-adjust (or v-adjust 0)
                                  :height (or height 1)) " " str))

(defun with-fileicon (icon str &optional height v-adjust)
  (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0)
                                    :height (or height 1)) " " str))

(defun with-octicon (icon str &optional height v-adjust)
  (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0)
                                   :height (or height 1)) " " str))

(defun with-material (icon str &optional height v-adjust)
  (s-concat (all-the-icons-material icon :v-adjust (or v-adjust 0)
                                    :height (or height 1)) " " str))

(defun with-mode-icon (mode str &optional height nospace face)
  (let* ((v-adjust (if (eq major-mode 'emacs-lisp-mode) 0.0 0.05))
         (args     `(:height ,(or height 1) :v-adjust ,v-adjust))
         (_         (when face
                      (lax-plist-put args :face face)))
         (icon     (apply #'all-the-icons-icon-for-mode mode args))
         (icon     (if (symbolp icon)
                       (apply #'all-the-icons-octicon "file-text" args)
                     icon)))
    (s-concat icon (if nospace "" " ") str)))
#+end_src

#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+end_src

***** Solaire Mode

#+begin_src emacs-lisp
;; (use-package solaire-mode
;;   :custom
;;   (solaire-mode-auto-swap-bg t)
;;   :config (solaire-global-mode +1))
#+end_src

***** Color Theme

I have a couple themes here. Eventually I want to setup my own custom theme but for now this will have to do.

#+begin_src emacs-lisp
(use-package autothemer
  :ensure t)

(add-to-list 'custom-theme-load-path "~/org/config/lib/emacs-themes/")
;; (load-theme 'gruvbox-black t)

(use-package doom-themes
  ;; Solaire mode won't work unless its global mode is setup before the
  ;; =load-theme= function is called.
  ;; :after (solaire-mode)
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-homage-black t)
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

***** Rainbow Delimiters

Normally I don't like rainbow delimiters but its actually pretty good on emacs. And you actually can't survive without it IMO.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

***** Syntax Highlighting

#+begin_src emacs-lisp
(use-package highlight-numbers
  :hook (prog-mode . highlight-numbers-mode))

(use-package highlight-escape-sequences
  :hook (prog-mode . hes-mode))
#+end_src

***** Rainbow Mode

#+begin_src emacs-lisp
(use-package rainbow-mode
  :init (rainbow-mode))
#+end_src

***** Transparency

#+begin_src emacs-lisp
;; Set transparency of emacs
(defun zamlz/set-transparency (value)
  "Sets the transparency of the frame window. 0=transparent/100=opaque"
  (interactive "nTransparency Value 0 - 100 opaque:")
  (set-frame-parameter (selected-frame) 'alpha value))

;; Add the transparency function to my leader keys
(zamlz/leader-keys
  "tx" '(zamlz/set-transparency :which-key "Set transparency"))

;; Set the default transparency
(zamlz/set-transparency 100)
#+end_src

**** Info Colors

#+begin_src emacs-lisp
(use-package info-colors
  :hook
  (Info-selection . info-colors-fontify-node)
  (info-mode . mixed-pitch-mode))
#+end_src

**** Daemon and Client Hooks

#+begin_src emacs-lisp
(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (setq doom-modeline-icon t)
                (with-selected-frame frame
                  (zamlz/set-font-faces)
                  (zamlz/set-transparency 90))))
  (zamlz/set-font-faces))
#+end_src

** Org Mode Packages

#+begin_src emacs-lisp
(require 'init-org)
#+end_src

** Load Remaining Modules

#+begin_src emacs-lisp
(dolist
    (dir (directory-files (expand-file-name "lisp" user-emacs-directory) nil ".*\\.el"))
  (require (intern (s-replace-regexp "\\.el" "" dir))))
#+end_src

* Xresources Setup
:PROPERTIES:
:header-args:C: :tangle ~/.config/xresources.d/emacs :mkdirp yes :comments no
:END:
The colorscheme defined in [[file:xresources.org][Xresources]] below doesn't actually matter. Emacs will override it anyway when you load our actual colorscheme. *However*, Emacs does in fact load this before rendering the GUI Window where as our actual colorscheme is loaded after the GUI Window is drawn. /Therefore/, this simple setup prevents the blinding white flash from appearing at startup! *Secondly*, if the Emacs config is bricked for some reason, our barebones environment will still be in /dark/ mode.

#+begin_src C
Emacs.foreground: xforeground
Emacs.background: xbackground

Emacs.color0:  xcolor0
Emacs.color1:  xcolor1
Emacs.color2:  xcolor2
Emacs.color3:  xcolor3
Emacs.color4:  xcolor4
Emacs.color5:  xcolor5
Emacs.color6:  xcolor6
Emacs.color7:  xcolor7
Emacs.color8:  xcolor8
Emacs.color9:  xcolor9
Emacs.color10: xcolor10
Emacs.color11: xcolor11
Emacs.color12: xcolor12
Emacs.color13: xcolor13
Emacs.color14: xcolor14
Emacs.color15: xcolor15
#+end_src
