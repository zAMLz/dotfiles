#+TITLE: Org-mode
#+ROAM_KEY: https://orgmode.org/
#+ROAM_TAGS: CONFIG SOFTWARE EMACS
#+AUTHOR: Amlesh Sivanantham (zamlz)
#+CREATED: [2021-03-27 Sat 00:18]
#+LAST_MODIFIED: [2021-04-03 Sat 12:12:58]

#+DOWNLOADED: screenshot @ 2021-03-31 18:49:35
[[file:data/org_mode_logo.png]]

Org-mode is a powerful plain text markup language for [[file:emacs.org][GNU/Emacs]].

* Useful Resources
- [[https://orgmode.org/manual/index.html][The Official Org Manual]]
- [[https://blog.jethro.dev/posts/org_mode_workflow_preview/][Jethro Kuan's Org-mode Workflow]]
- [[https://www.reddit.com/r/orgmode/comments/i2d75e/tracking_my_diet_with_emacs_and_orgmode/][Reddit: Tracking my diet with Emacs and Org-mode]]

* Configuration
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.emacs.d/lisp/init-org.el :comments both :mkdirp yes
:END:
** Better Font Faces Hook

We can configure =org-mode= font faces via a seperate function that we define. We need to add it as a hook afterwards however which is why this section appears before the basic configuration.

#+begin_src emacs-lisp
(defun zamlz/org-font-setup ()
  ;; Converts bullet lists to not use the - character but the • character
  (font-lock-add-keywords 'org-mode
    '(("^ *\\([-]\\) "
       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; ;; Set faces for heading levels
  ;; ;; for now, keep all at 1.0
  ;; (dolist (face '((org-level-1 . 3.0)
  ;;   (org-level-2 . 2.5)
  ;;   (org-level-3 . 2.0)
  ;;   (org-level-4 . 1.5)
  ;;   (org-level-5 . 1.0)
  ;;   (org-level-6 . 1.0)
  ;;   (org-level-7 . 1.0)
  ;;   (org-level-8 . 1.0)))
  ;;   (set-face-attribute (car face) nil
  ;;                       :font "Fira Code"
  ;;                       :weight 'regular
  ;;                       :height (cdr face)))

  ;;   ;; ensure that anything that should be fixed-width in org appears that way
  ;; (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  ;; (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch)
  ;; (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  ;; (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  ;; (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  ;; (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  ;; (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
  )
#+end_src

** Mode Startup Hooks

These are some hooks that we would like to run when =org-mode= is started.

#+begin_src emacs-lisp
(defun zamlz/org-mode-setup ()
  (org-indent-mode)
  (org-make-toc-mode)
  ;; (variable-pitch-mode 1)
  (visual-line-mode +1)
  (setq evil-auto-indent nil)
  (setq fill-column 10000000))
#+end_src

** Basic Configuration

I should probably split this bloody mess up.

#+begin_src emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :hook ((org-mode . zamlz/org-mode-setup))
  :bind (:map org-mode-map
              ("C-M-h" . org-previous-link)
              ("C-M-l" . org-next-link))
  :custom

  ;; Setup directories
  (org-directory "~/org/gtd/")
  (org-agenda-files (list org-directory))

  ;; Add some nice visuals changes
  (org-ellipsis " ▾")

  ;; These will be unhidden by the org-appear package
  (org-hide-emphasis-markers t)

  ;; This is so that the imenu displays all levels in ivy
  (org-imenu-depth 10)

  ;; dont use C-c C-o for opening links REEEEEEEEEEEE
  (org-return-follows-link t)

  ;; Some todo/logging changes
  (org-enforce-todo-dependencies t)
  (org-log-done t)
  (org-log-into-drawer t)
  (org-treat-S-cursor-todo-selection-as-state-change nil)

  ;; Setup org capture mode
    ;; Setup refiling
  (org-log-refile t)
  (org-refile-use-outline-path 'file)
  (org-outline-path-complete-in-steps nil)
  (org-refile-allow-creating-parent-nodes 'confirm)
  (org-refile-targets
   `((,(concat org-directory "/gtd.org") :maxlevel . 1)))

  ;; Setup archive location
  (org-archive-location (concat org-directory "/archive.org::"))

  ;; ensure that refiling saves buffers
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  ;; Inline Image improvements
  (org-startup-with-inline-images t)
  (org-image-actual-width 500)

  ;; Finally a post setup func to setup fonts
  (zamlz/org-font-setup))
#+end_src

** Task Categories

#+begin_src emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "|" "DONE(d)")
              (sequence "ROUTINE(r)" "|" "DONE(d)")
              (sequence "PROJECT(p)" "|" "COMPLETED(d)" "CANCELLED(c)")
              (sequence "WAITING(w)" "|")
              (sequence "|" "CANCELLED(c)")
              (sequence "SOMEDAY(s)" "|" "CANCELLED(c)")
              (sequence "MEETING(m)" "|"))))
#+end_src

** Task Colors

The first version here works nice with the =doom-nord= theme. The second version here works better with my custom gruvbox theme.

#+begin_src emacs-lisp
;; (setq org-todo-keyword-faces
;;   '(("DONE"      . (:background "#98be65" :foreground "#ffffff" :weight bold))
;;     ("TODO"      . (:background "#ff6c6b" :foreground "#ffffff" :weight bold))
;;     ("ROUTINE"   . (:background "#3f444a" :foreground "#51afef" :weight bold))
;;     ("PROJECT"   . (:background "#51afef" :foreground "#ffffff" :weight bold))
;;     ("COMPLETED" . (:background "#98be65" :foreground "#ffffff" :weight bold))
;;     ("WAITING"   . (:background "#3f444a" :foreground "#ffffff" :weight bold))
;;     ("CANCELLED" . (:background "#181818" :foreground "#ffffff" :weight bold))
;;     ("SOMEDAY"   . (:background "#3f444a" :foreground "#ffffff" :weight bold))
;;     ("MEETING"   . (:background "#a9a1e1" :foreground "#ffffff" :weight bold))))
#+end_src

#+begin_src emacs-lisp
(setq org-todo-keyword-faces
  '(("DONE"      . (:background "#b8bb26" :foreground "#000000" :weight bold))
    ("TODO"      . (:background "#fb4934" :foreground "#000000" :weight bold))
    ("ROUTINE"   . (:background "#689d6a" :foreground "#000000" :weight bold))
    ("PROJECT"   . (:background "#458588" :foreground "#000000" :weight bold))
    ("COMPLETED" . (:background "#b8bb26" :foreground "#000000" :weight bold))
    ("WAITING"   . (:background "#d79921" :foreground "#000000" :weight bold))
    ("CANCELLED" . (:background "#181818" :foreground "#fb4934" :weight bold))
    ("SOMEDAY"   . (:background "#3f444a" :foreground "#000000" :weight bold))
    ("MEETING"   . (:background "#b16286" :foreground "#000000" :weight bold))))
#+end_src

** Better Heading Bullets

The default bullets are asteriks and thats just plain ugly. We change it to some nice unicode characters. I should also look into =org-superstar-mode= as well at some point.

#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "●" "○" "●" "○" "●" "○")))
  ;; (org-bullets-bullet-list '("◇")))
#+end_src

** Center Org buffers

Center the org buffers and remove line numbers to reduce visual clutter.

#+begin_src emacs-lisp
(defun zamlz/org-mode-visual-fill ()
  (setq visual-fill-column-width zamlz/default-screen-width
        ;; visual-fill-column-extra-text-width (0 . 1000)
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

 (use-package visual-fill-column
   :hook (org-mode . zamlz/org-mode-visual-fill))
#+end_src

** Org Keybindings
*** Default Keybindings

Just some keybindings to access various =org-mode= commands.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
#+end_src

*** Org Mode Quick Access

Just quick access to my most used org-mode functions via the leader key.

#+begin_src emacs-lisp
(zamlz/leader-keys
  "o"  '(:ignore t :which-key "Org Mode")
  "oa" '(org-agenda-list :which-key "Org Agenda Weekly View")
  "oo" '(org-capture :which-key "Org Capture Templates")
  "oi" '((lambda () (interactive)
           (find-file (concat org-directory "/inbox.org"))
           (message "Opened:  %s" (buffer-name)))
         :which-key "Inbox")
  "og" '((lambda () (interactive)
           (find-file (concat org-directory "/gtd.org"))
           (message "Opened:  %s" (buffer-name)))
         :which-key "GTD")
  "oj" '((lambda () (interactive)
           (find-file (concat org-directory "/journal.org"))
           (message "Opened:  %s" (buffer-name)))
         :which-key "Journal"))
#+end_src

** Org Capture Templates
*** DOCT: Declarative Org Capture Templates

DOCT is a cool package that lets me build =org-capture= templates with ease. It's really way more readable than the original syntax.

#+begin_src emacs-lisp
(use-package doct
  :ensure t
  ;;recommended: defer until calling doct
  :commands (doct))
#+end_src

*** Template Definitions

Org mode template definitions in the doct format

#+begin_src emacs-lisp
(setq org-capture-templates
      (doct '(("Todo, Meetings, Projects and more!" :keys "t"
               :file "inbox.org"
               :type entry
               :prepend t
               :template ("* %{todo-state} %^{Description}"
                          ":PROPERTIES:"
                          ":Created: %U"
                          ":END:"
                          "%?")
               :children (("Todo Task" :keys "t"
                           :todo-state "TODO")
                          ("Routine/Habit" :keys "r"
                           :todo-state "ROUTINE")
                          ("Project Group" :keys "p"
                           :todo-state "PROJECT")
                          ("Someday/Maybe" :keys "s"
                           :todo-state "SOMEDAY")
                          ("Meeting/Appointment" :keys "m"
                           :todo-state "MEETING")
                          ("Todo Task (context)" :keys "i"
                           :todo-state "TODO"
                           :template ("* %{todo-state} %^{Description}"
                                      ":PROPERTIES:"
                                      ":Created: %U"
                                      ":END:"
                                      "%?"
                                      "%i"
                                      "%a"))))
              ("Journal Entries and Data Capture" :keys "j"
               :file "journal.org"
               :type entry
               :datetree t
               :template ("* %U :JOURNAL:%{extra-tags}"
                          "%?")
               :children (("Journal (now)" :keys "j"
                           :extra-tags "REALITY:")
                          ("Journal (dream)" :keys "d"
                           :extra-tags "DREAM:")
                          ("Journal (context)" :keys "i"
                           :template ("* %U :JOURNAL:CONTEXT:"
                                      "%?"
                                      "%i"
                                      "%a")))))))
#+end_src

** Org Make TOC

Dynamically make table of contents in org files

#+begin_src emacs-lisp
(use-package org-make-toc)
#+end_src

** LaTeX Inline Preview

Pretty straightforward except that you need to have =latex= installed and also =dvi2png= as well. Need to figure out how to configure the size of the generated latex image.

#+begin_src emacs-lisp
(setq org-startup-with-latex-preview t)
(setq org-highlight-latex-and-related '(native script entities))
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
(setq org-preview-latex-image-directory  "/tmp/ltximg/")
(add-to-list 'org-src-block-faces '("latex" (:inherit default :extend t)))
#+end_src

** Org Latex FragTog

[[https://github.com/io12/org-fragtog][github:io12/org-fragtog]] basically toggles  latex fragements when you hover over them. Here is some inline latex to test it with: \(\int_0^1\frac{x^2}{2}\). And now where is some more but on a seperate line:

\[\sqrt{\beta^2+3}-\sum_{\phi=1}^\infty \frac{x^\phi-1}{\Gamma(a)}\]

#+begin_src emacs-lisp
(use-package org-fragtog
  :hook (org-mode . org-fragtog-mode))
#+end_src

** Habit Tracking

Enables habit tracking in =org-mode= via =org-habit=.

#+begin_src emacs-lisp
(add-to-list 'org-modules 'org-habit t)
(setq org-habit-preceding-days 31)
(setq org-habit-following-days 3)
(setq org-habit-show-habits-only-for-today t)
;;(setq org-habit-show-all-today t)
#+end_src

** Org Download

This package should let me quickly download images from web browsers and have images in my clipboard and paste them into my org files.

#+begin_src emacs-lisp
(use-package org-download
  :custom
  (org-download-image-dir "./data")
  (org-download-heading-lvl nil)
  (org-download-method 'directory))
#+end_src

** Org Appear

Added [[https://github.com/awth13/org-appear][github:awth13/org-appear]]

#+begin_src emacs-lisp
(use-package org-appear
  :hook (org-mode . org-appear-mode)
  :custom
  (org-appear-autoentities nil)
  (org-appear-autolinks t)
  (org-appear-autoemphasis t)
  (org-appear-autosubmarkers nil))
#+end_src

** Org Last Modified Timestamp

The following allows any =#+LAST_MODIFIED= headers to be updated on file-save.

#+begin_src emacs-lisp
(defun zamlz/update-org-modified-property ()
  "If a file contains a '#+LAST_MODIFIED' property update it to contain
  the current date/time"
  (interactive)
  (save-excursion
    (widen)
    (goto-char (point-min))
    (when (re-search-forward "^#\\+LAST_MODIFIED:" (point-max) t)
      (progn
        (kill-line)
        (insert (format-time-string " [%Y-%m-%d %a %H:%M:%S]") )))))
#+end_src

It is made available like so.

#+begin_src emacs-lisp
(defun zamlz/org-mode-before-save-hook ()
  (when (eq major-mode 'org-mode)
    (zamlz/update-org-modified-property)))

(add-hook 'before-save-hook #'zamlz/org-mode-before-save-hook)
#+end_src

** Package Provider

#+begin_src emacs-lisp
(provide 'init-org)
#+end_src
