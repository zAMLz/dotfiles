#+TITLE: Vertico
#+AUTHOR: Amlesh Sivanantham (zamlz)
#+ROAM_KEY: https://github.com/minad/vertico
#+ROAM_ALIAS: vertico-mode
#+ROAM_TAGS: CONFIG SOFTWARE
#+CREATED: [2021-05-18 Tue 19:38]
#+LAST_MODIFIED: [2021-05-18 Tue 21:33:35]
#+STARTUP: content

* VERTical Interactive COmpletion
=vertico= is a minimal completion UI for [[file:emacs.org][GNU/Emacs]]. It is built ontop of the regular completion system unlike other alternatives.

* Configuration
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/emacs/lisp/init-vertico.el :comments both :mkdirp yes
:END:
** Enable Dependencies

In order to make =vertico= completion a lot nicer that what it is, we make use of the [[file:orderless.org][Orderless]] package which enables orderless completion modes in various completion buffers.

#+begin_src emacs-lisp
(require 'init-orderless)
#+end_src

** Package Install

#+begin_src emacs-lisp
(use-package vertico
  :bind (:map vertico-map
         ("M-j" . vertico-next)
         ("M-k" . vertico-previous)
         ("M-f" . vertico-exit)
         :map minibuffer-local-map
         ("M-h" . backward-kill-word))
  :init
  (vertico-mode))
#+end_src

#+begin_src emacs-lisp
(setq vertico-cycle t)
#+end_src

** Better Minibuffer Support

By default, [[file:emacs.org][GNU/Emacs]] doesn't handle =vertico= in the minibuffer as well I'd like. Let's make sure we allow recursive minibuffers.

#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t)
#+end_src

Resize the minibuffer on the fly as completion shrinks.

#+begin_src emacs-lisp
(setq resize-mini-windows t)
#+end_src

Do not allow the cursor in minibuffer prompts

#+begin_src emacs-lisp
(setq minibuffer-prompt-properties '(read-only t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src

I actually I'm kinda unsure about the purpose of this block. I saw it in the original example for =vertico='s github page and copied it.

#+begin_src emacs-lisp
(defun crm-indicator (args)
  (cons (concat "[CRM] " (car args)) (cdr args)))
(advice-add #'completing-read-multiple :filter-args #'crm-indicator)
#+end_src

** Feature Provide

#+begin_src emacs-lisp
(provide 'init-vertico)
#+end_src
