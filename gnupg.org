#+TITLE: GnuPG
#+AUTHOR: Amlesh Sivanantham (zamlz)
#+ROAM_ALIAS:
#+ROAM_TAGS: CONFIG SOFTWARE
#+ROAM_KEY: https://gnupg.org/
#+CREATED: [2021-03-29 Mon 18:57]
#+LAST_MODIFIED: [2021-03-31 Wed 18:51:18]

#+DOWNLOADED: screenshot @ 2021-03-29 19:05:47
[[file:data/gnupg_logo.png]]

GnuPG is GNU's implementation of the OpenPGP standard.

* GPG Configuration
:PROPERTIES:
:header-args:conf: :tangle ~/.gnupg/gpg.conf :mkdirp yes
:END:

#+begin_src conf
# When outputting certificates, view user IDs distinctly from keys
fixed-list-mode

# Long keyids are more collision-resistant than short keyids
# (Its trivial to make a key with any desired short keyid)
keyid-format 0xlong
with-fingerprint

# when multiple digests are supported by all recipients, choose the strongest one:
personal-digest-preferences SHA512 SHA384 SHA256 SHA224

# preferences chosen for new keys should prioritize stronger algorithms:
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 BZIP2 ZLIB ZIP Uncompressed

# If you use a graphical environment (and even if you don't) you should be
# using an agent: (similar arguments as
# https://www.debian-administration.org/users/dkg/weblog/64)
use-agent

# You should always know at a glance which User IDs gpg thinks are
# legitimately bound to the keys in your keyring:
verify-options show-uid-validity
list-options show-uid-validity

# when making an OpenPGP certification, use a stronger digest than the default SHA1:
cert-digest-algo SHA256

# prevent version string from appearing in your signatures/public keys
no-emit-version
#+end_src

* GPG Agent Configuration
:PROPERTIES:
:header-args:conf: :tangle ~/.gnupg/gpg-agent.conf :mkdirp yes
:END:

#+begin_src conf
default-cache-ttl 600
max-cache-ttl 7200
enable-ssh-support
pinentry-program /usr/bin/pinentry-switcher

# This means clients like Emacs can get the password in their own way
# and push to gpg. For this to work with emacs, set `epa-pinentry-mode`
# to `'loopback` in Emacs
allow-emacs-pinentry
allow-loopback-pinentry
#+end_src
