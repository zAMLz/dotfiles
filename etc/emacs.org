#+TITLE: Emacs Init.el Org Configuration File
#+AUTHOR: Amlesh Sivanantham
#+STARTUP: overview

#+begin_src emacs-lisp
;;; ------------------------------------------------------------------------------------------
;;; ------------------------------------------------------------------------------------------
;;;                    _______   ____  __   ______
;;;                   / ____/ | / / / / /  / ____/___ ___  ____ ___________
;;;                  / / __/  |/ / / / /  / __/ / __ `__ \/ __ `/ ___/ ___/
;;;                 / /_/ / /|  / /_/ /  / /___/ / / / / / /_/ / /__(__  )
;;;                 \____/_/ |_/\____/  /_____/_/ /_/ /_/\__,_/\___/____/
;;; ------------------------------------------------------------------------------------------
;;;                           My Personal GNU Emacs Configuration
;;; ------------------------------------------------------------------------------------------
;;; Commentary:
;;;
;;; ... Present day, present time ...
;;;
;;; ------------------------------------------------------------------------------------------
;;; Code:
;;; ------------------------------------------------------------------------------------------
#+end_src

* Emacs Configuration

All configuration found under here use internal packages from within emacs. This is why they all have =:ensure nil= set.

** Basic UI Changes

Lets get some basic settings out of the way here.

#+begin_src emacs-lisp
(use-package emacs
  :preface
  (defvar zamlz/indent-width 4)   ; tab size
  (defvar zamlz/default-screen-width 100)
  :config
  (setq ring-bell-function 'ignore       ; minimise distraction
        frame-resize-pixelwise t
        default-directory "~/")

  (tool-bar-mode -1)          ; Disable the toolbar
  (menu-bar-mode -1)          ; disable the menubar
  ;; (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  ;; better scrolling experience
  (setq scroll-margin 0
        scroll-conservatively 101 ; > 100
        scroll-preserve-screen-position t
        auto-window-vscroll nil)

  ;; Always use spaces for indentation
  (setq-default indent-tabs-mode nil
                tab-width zamlz/indent-width
                fill-column zamlz/default-screen-width))
#+end_src

** Disable Default Startup

Original startup is hideous...

#+begin_src emacs-lisp
(use-package "startup"
  :ensure nil
  :config (setq inhibit-startup-screen t))
#+end_src

** Modernize Selection Behaviour

Replaces active region just by typing text (is this true in visual mode as well?)

#+begin_src emacs-lisp
(use-package delsel
  :ensure nil
  :config (delete-selection-mode +1))
#+end_src

** Disable Scroll-Bar

#+begin_src emacs-lisp
(use-package scroll-bar
  :ensure nil
  :config (scroll-bar-mode -1))
#+end_src

** Enable Column Numbers

#+begin_src emacs-lisp
(use-package simple
  :ensure nil
  :config
  (column-number-mode +1)
  (global-display-line-numbers-mode t))

;; DONT display line numbers in certain modes
(dolist (mode '(term-mode-hook
                shell-mode-hook
                eshell-mode-hook
                vterm-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Split and Follow Windows

#+begin_src emacs-lisp
(use-package "window"
  :ensure nil
  :preface
  (defun zamlz/split-and-follow-horizontally ()
    "Split window below."
    (interactive)
    (split-window-below)
    (other-window 1))
  (defun zamlz/split-and-follow-vertically ()
    "Split window right."
    (interactive)
    (split-window-right)
    (other-window 1))
  :config
  (global-set-key (kbd "C-x 2") #'zamlz/split-and-follow-horizontally)
  (global-set-key (kbd "C-x 3") #'zamlz/split-and-follow-vertically))
#+end_src

** Backup and Autosave Files

Emacs decides to save backup files and lockfiles within the same directory as the files we are editing. Thats just ugly when looking at the filesystem. This will fix that.

   #+begin_src emacs-lisp
   (use-package files
     :ensure nil
     :config
     (setq create-lockfiles nil ; don't create .# files (crashes 'npm start')
           backup-directory-alist `(("." . "~/.emacs.d/backup"))))
   #+end_src

** Auto-Refresh Changes from External Buffers

Auto refresh changes from outsides buffers. What more needs to be said.

#+begin_src emacs-lisp
(use-package autorevert
  :ensure nil
  :config
  (global-auto-revert-mode +1)
  (setq auto-revert-interval 2
        auto-revert-check-vc-info t
        global-auto-revert-non-file-buffers t
        auto-revert-verbose nil))
#+end_src

** Eldoc Documentation

Slightly shorten the Eldoc display delay

#+begin_src emacs-lisp
(use-package eldoc
  :ensure nil
  :diminish eldoc-mode
  :config
  (setq eldoc-idle-delay 0.4))
#+end_src

** Mouse Wheel Scroll Speed

#+begin_src emacs-lisp
(use-package mwheel
  :ensure nil
  :config (setq mouse-wheel-scroll-amount '(2 ((shift) . 1))
                mouse-wheel-progressive-speed nil))
#+end_src

** Highlight Matching Parentheses

#+begin_src emacs-lisp
(use-package paren
  :ensure nil
  :init (setq show-paren-delay 0)
  :config (show-paren-mode +1))
#+end_src

** Auto-pairing Quotes and Parentheses

Super useful for auto-pairing certain characters. However we should make use of a hook to prevent it for left carrot bracket in org-mode buffers

#+begin_src emacs-lisp
(use-package elec-pair
  :ensure nil
  :hook
  (prog-mode . electric-pair-mode)
  ;; disable <> auto-pairing in org-mode buffers
  (org-mode  . (lambda ()
    (setq-local electric-pair-inhibit-predicate
                `(lambda (c)
                   (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c)))))))
#+end_src

** Clean Whitespace on Buffer Save

#+begin_src emacs-lisp
(use-package whitespace
  :ensure nil
  :hook (before-save . whitespace-cleanup))
#+end_src

** Dump Custom-Set-Variables

#+begin_src emacs-lisp
(use-package cus-edit
  :ensure nil
  :config
  (setq custom-file (concat user-emacs-directory "to-be-dumped.el")))
#+end_src

** Dired Customization

#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :after evil-collection
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom ((dired-listing-switches "-lahF --group-directories-first"))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer))
#+end_src

* UI Customization
** Startup Dashboard

The default landing page isn't quite nice. I originally had it configured to display the scratch page, but then I really wanted like a menu to quickly access my stuff.

#+begin_src emacs-lisp
;; no default startup screen!
;; (setq inhibit-startup-message t)

;; Enable custom dashboard
(use-package dashboard
  :ensure t
  :config
  (setq dashboard-startup-banner "~/lib/emacs-themes/logo.txt")
  (setq dashboard-center-content t)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-navigator t)
  (setq dashboard-set-init-info t)
  (setq initial-buffer-choice (lambda() (get-buffer "*dashboard*")))
  (setq dashboard-items '())
  (dashboard-modify-heading-icons '((bookmarks . "book")))
  (dashboard-setup-startup-hook))
#+end_src

** Font Configuration

I have a lot of fonts commented out right now because I can't decide on which ones to keep lol.

#+begin_src emacs-lisp
;; Set default face
;; (set-face-attribute 'default nil :font "xos4 Terminus" :height 110)
(set-face-attribute 'default nil :font "Fira Code" :height 100)
;; (set-face-attribute 'default nil :font "Dina" :height 100)
;; (set-face-attribute 'default nil :font "Iosevka Term" :height 100)
;; (set-face-attribute 'default nil :font "Source Code Pro" :height 100)

;; Set the fixed pitch face
;; (set-face-attribute 'fixed-pitch nil :font "xos4 Terminus" :height 100)

;; Set the variable pitch face
;; (set-face-attribute 'variable-pitch nil :font "Fira Code" :height 100)
#+end_src

** Keybinding Configuration

Former vim user and the best thing about vim is the keybindings. It's a good thing that there are so many evil packages in emacs.

*** ESC should save the day

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

*** Evil Mode

This is the core of =Evil-Mode=. This basicallly adds the modal functionality to emacs that we see in vim. But we also add a little bit of our own custom bindings not set by default that were present in vim for the sake of my sanity.

#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init (setq evil-want-keybinding nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  ;; C-h is help in normal mode, but becomes BACKSPACE in insert mode
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src

*** Extend Evil Mode with Evil Collection

Unfortunately, =Evil-Mode= is only enabled in text buffers. This means that in special buffers spawned by packages like =Magit=, =Org=, etc., we would not be able to use vim-like bindings. The package below aims to provide even more functionality to these other non-trivial modes.

#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :ensure t
  :config (evil-collection-init))
#+end_src

*** Evil Commentary

Adds keybindings for quick commenting. Use =gcc= to comment out a line, use =gcap= to comment out a paragraph, use =gc= in visual mode to comment out a selection.

#+begin_src emacs-lisp
(use-package evil-commentary
  :after evil
  :diminish
  :config (evil-commentary-mode +1))
#+end_src

*** Which Key

Spawns a simple UI panel that shows available keybindings based on what keys I've pressed so far.

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config (setq which-key-idle-delay 0.1))
#+end_src

*** General Keybinder

This is an interesting package. It basically lets me define my own keybinding space and configure it to run various commands as I see fit.

#+begin_src emacs-lisp
(use-package general
  :config
  (general-create-definer zamlz/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC"))
#+end_src

*** Hydra

Hydra lets me also define functions that can very quickly let me do various tasks in quick succession. I will be using this a lot of =general= I imagine.

#+begin_src emacs-lisp
(use-package hydra)
#+end_src

** Leader Keybindings

I chose not to put this in the previous section because I feel like this might grow alot and its also its own unique space. This where my custom functions that get bound to various keys will be assigned via =General=.

*** Misc Shortcuts

These are just random shorts to emacs built-in commands that I'd like access to as a keybinding.

#+begin_src emacs-lisp
(zamlz/leader-keys
 "t"  '(:ignore t :which-key "toggles")
 "tt" '(counsel-load-theme :which-key "choose theme"))
#+end_src

*** Text Size Scaling

Adds a =Hydra= function to =General= to control the size of the font face.

#+begin_src emacs-lisp
(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

;; Add hydra func to our personal keybindings
(zamlz/leader-keys
  "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src

** Autocompletion Engine
*** Ivy, Counsel, and Swiper

Not much to say here, just setting up =Ivy= and =Counsel=. It also sets up this thing called =Swiper=, but I have no idea what that is.

=Ivy= is basically a completion framework. Its minimal but provides a simple but powerful menu that appears when switching files, opening buffers, etc. =Counsel= on the other hand, provides replaces commands that replace the typical emacs commands.

#+begin_src emacs-lisp
(use-package ivy
  :defer 0.1
  :diminish
  :bind (("C-x B" . ivy-switch-buffer-other-window)
     :map ivy-minibuffer-map
     ("TAB" . ivy-alt-done)
     ("C-l" . ivy-alt-done)
     ("C-j" . ivy-next-line)
     ("C-k" . ivy-previous-line)
     :map ivy-switch-buffer-map
     ("C-k" . ivy-previous-line)
     ("C-l" . ivy-done)
     ("C-d" . ivy-switch-buffer-kill)
     :map ivy-reverse-i-search-map
     ("C-k" . ivy-previous-line)
     ("C-d" . ivy-reverse-i-search-kill))
  :custom
  (ivy-count-format "(%d/%d) ")
  (ivy-use-virtual-buffers t)
  :config (ivy-mode))

(use-package counsel
  :after ivy
  :bind (("M-x" . counsel-M-x)
     ("C-x b" . counsel-switch-buffer)
     ("C-x C-f" . counsel-find-file)
     :map minibuffer-local-map
     ("C-r" . 'counsel-minibuffer-history))
  :config (counsel-mode))

;; TODO: Figure out what swiper is lol
(use-package swiper
  :after ivy
  :bind (("C-s" . swiper)))
#+end_src

*** Ivy Rich

=Ivy-Rich= provides extra columns in the counsel commands to get more information about each item during autocompletion.

#+begin_src emacs-lisp
;; Adds nice icons to the ivy rich buffer
(use-package all-the-icons-ivy-rich
  :after counsel-projectile
  :init (all-the-icons-ivy-rich-mode 1))

;; Actually install ivy rich
(use-package ivy-rich
  :after (ivy all-the-icons-ivy-rich)
  :init (ivy-rich-mode 1))
#+end_src

** Themes and Appearance
*** Modeline

To use =Doom-Modeline=, we need to have some custom icons installed. However, they must be manually installed via the following command (=M-x all-the-icons-install-fonts=)

#+begin_src emacs-lisp
(use-package all-the-icons)

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+end_src

*** Color Theme

I have a couple themes here. Eventually I want to setup my own custom theme but for now this will have to do.

#+begin_src emacs-lisp
(use-package autothemer
  :ensure t)

(add-to-list 'custom-theme-load-path "~/lib/emacs-themes/")
(load-theme 'gruvbox-black t)

;; (use-package doom-themes
;;   :config
;;   ;; Global settings (defaults)
;;   (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
;;         doom-themes-enable-italic t) ; if nil, italics is universally disabled
;;   (load-theme 'doom-nord t)
;;   ;; Enable flashing mode-line on errors
;;   (doom-themes-visual-bell-config)
;;   ;; Enable custom neotree theme (all-the-icons must be installed!)
;;   (doom-themes-neotree-config)
;;   ;; or for treemacs users
;;   (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
;;   (doom-themes-treemacs-config)
;;   ;; Corrects (and improves) org-mode's native fontification.
;;   (doom-themes-org-config))

;;(use-package gruvbox-theme
;;  :init (load-theme 'gruvbox-dark-hard t))

;; (set-background-color "black")

;; (use-package spacemacs-theme
;;   :defer t
;;   :init (load-theme 'spacemacs-dark t))

;; (load-theme 'xresources t)

;; (use-package seti-theme
;;   :defer t
;;   :init (load-theme 'seti t))
#+end_src

*** Rainbow Delimiters

Normally I don't like rainbow delimiters but its actually pretty good on emacs. And you actually can't survive without it IMO.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Syntax Highlighting

#+begin_src emacs-lisp
(use-package highlight-numbers
  :hook (prog-mode . highlight-numbers-mode))

(use-package highlight-escape-sequences
  :hook (prog-mode . hes-mode))
#+end_src

*** Rainbow Mode

#+begin_src emacs-lisp
(use-package rainbow-mode
  :init (rainbow-mode))
#+end_src

*** Transparency

#+begin_src emacs-lisp
;; Set transparency of emacs
(defun zamlz/set-transparency (value)
  "Sets the transparency of the frame window. 0=transparent/100=opaque"
  (interactive "nTransparency Value 0 - 100 opaque:")
  (set-frame-parameter (selected-frame) 'alpha value))

;; Add the transparency function to my leader keys
(zamlz/leader-keys
  "tx" '(zamlz/set-transparency :which-key "Set transparency"))

;; Set the default transparency
(zamlz/set-transparency 80)
#+end_src

** Documentation Redux
*** Helpful Help Commands

Improves the documentation shown when running one of emacs's =describe-*= functions.

#+begin_src emacs-lisp
(use-package helpful
  :ensure t
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

** Dired Improvements
*** Single Dired Buffer

This doesn't prevent dired from having multiple buffers open at once, rather, it forces dired to not create a new buffer whenever a new directory is open.

#+begin_src emacs-lisp
(use-package dired-single)
#+end_src

*** Icons for Dired

#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

*** Hide Dotfiles

Hide hidden files from dired buffers (toggleable)

#+begin_src emacs-lisp
(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "H" 'dired-hide-dotfiles-mode))
#+end_src

* Development and Project Management

Language specific and Project Management related configurations here...

** Languages
*** Language Server Protocol

Powerful languages server protocols that were designed originally for visual studio code in order to created a unified protocol for getting functionality of the langauge from within the editor.

#+begin_src emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t))
#+end_src

*** Python

#+begin_src emacs-lisp
(use-package python
  :ensure nil
  :hook (python-mode . lsp-deferred)
  :config (setq python-indent-offset zamlz/indent-width))
#+end_src

*** C/C++/Java

Sets the formatting style for C/C++/Java from GNU (default) to the popular standard K&R.

#+begin_src emacs-lisp
(use-package cc-vars
  :ensure nil
  :config
  (setq-default c-basic-offset zamlz/indent-width)
  (setq c-default-style '((java-mode . "java")
                          (awk-mode . "awk")
                          (other . "k&r"))))
#+end_src

** Company Auto-Completion for Programming Languages

Use =C-n= and =C-p= to navigate tooltip

#+begin_src emacs-lisp
(use-package company
  :diminish company-mode
  :hook (prog-mode . company-mode)
  :config
  (setq company-minimum-prefix-length 1
        company-idle-delay 0.1
        company-selection-wrap-around t
        company-tooltip-align-annotations t
        ; show tooltip even for single candidate
        company-frontends '(company-pseudo-tooltip-frontend
                            company-echo-metadata-frontend))
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous)
    (define-key company-active-map (kbd "RET") 'company-complete-selection)
    (define-key company-active-map (kbd "TAB") 'company-complete-common)))
#+end_src

** Flycheck Syntax Linter

#+begin_src emacs-lisp
(use-package flycheck
  :config (global-flycheck-mode +1))
#+end_src

** Projectile

Provides useful integration to a variety of project formats. Able to automatically identify project directories and can be configured to build, run unit-tests, etc. Need to explore this more.

#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/src")
(setq projectile-project-search-path '("~/src")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src

** Magit Git Interface

Git interface for emacs. Very quickly run git commands and evaluate diffs, etc.

#+begin_src emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status)
  :config (add-hook 'with-editor-mode-hook #'evil-insert-state))
#+end_src

** Forge

Package provides integration to upstream GitHub, GitLab APIs and more. Setting this up would let me merge/review pull requests, create/address issues, etc. from within emacs.

#+begin_src emacs-lisp
;; (use-package forge)
#+end_src

** Markdown Mode

#+begin_src emacs-lisp
(use-package markdown-mode
  :hook (markdown-mode . visual-line-mode))
#+end_src

** Web Mode

Useful mode for editing web based files

#+begin_src emacs-lisp
(use-package web-mode
  :mode (("\\.html?\\'" . web-mode)
         ("\\.css\\'"   . web-mode)
         ("\\.jsx?\\'"  . web-mode)
         ("\\.tsx?\\'"  . web-mode)
         ("\\.json\\'"  . web-mode))
  :config
  (setq web-mode-markup-indent-offset 2) ; HTML
  (setq web-mode-css-indent-offset 2)    ; CSS
  (setq web-mode-code-indent-offset 2)   ; JS/JSX/TS/TSX
  (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))
#+end_src

* Org Mode

This is what emacs is about! And setting this up is crucial. There are quite a bit of configurable parts.

** Better Font Faces Hook

We can configure =org-mode= font faces via a seperate function that we define. We need to add it as a hook afterwards however which is why this section appears before the basic configuration.

#+begin_src emacs-lisp
(defun zamlz/org-font-setup ()
  ;; Converts bullet lists to not use the - character but the • character
  (font-lock-add-keywords 'org-mode
    '(("^ *\\([-]\\) "
       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; ;; Set faces for heading levels
  ;; ;; for now, keep all at 1.0
  ;; (dolist (face '((org-level-1 . 3.0)
  ;;   (org-level-2 . 2.5)
  ;;   (org-level-3 . 2.0)
  ;;   (org-level-4 . 1.5)
  ;;   (org-level-5 . 1.0)
  ;;   (org-level-6 . 1.0)
  ;;   (org-level-7 . 1.0)
  ;;   (org-level-8 . 1.0)))
  ;;   (set-face-attribute (car face) nil
  ;;                       :font "Fira Code"
  ;;                       :weight 'regular
  ;;                       :height (cdr face)))

  ;;   ;; ensure that anything that should be fixed-width in org appears that way
  ;; (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  ;; (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch)
  ;; (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  ;; (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  ;; (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  ;; (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  ;; (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
  )
#+end_src

** Mode Startup Hooks

These are some hooks that we would like to run when =org-mode= is started.

#+begin_src emacs-lisp
(defun zamlz/org-mode-setup ()
  (org-indent-mode)
  ;; (variable-pitch-mode 1)
  (visual-line-mode +1)
  (setq evil-auto-indent nil)
  (setq fill-column 10000000))
#+end_src

** Basic Configuration

I should probably split this bloody mess up.

#+begin_src emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :hook ((org-mode . zamlz/org-mode-setup))
  :custom

  ;; Setup directories
  (org-directory "~/usr/org")
  (org-agenda-files (list org-directory))

  ;; Add some nice visuals changes
  (org-ellipsis " ▾")

  ;; Some todo/logging changes
  (org-enforce-todo-dependencies t)
  (org-log-done t)
  (org-log-into-drawer t)
  (org-treat-S-cursor-todo-selection-as-state-change nil)

  ;; Setup org capture mode
    ;; Setup refiling
  (org-log-refile t)
  (org-refile-use-outline-path 'file)
  (org-outline-path-complete-in-steps nil)
  (org-refile-allow-creating-parent-nodes 'confirm)
  (org-refile-targets
   `((,(concat org-directory "/gtd.org") :maxlevel . 1)))

  ;; Setup archive location
  (org-archive-location (concat org-directory "/archive.org::"))

  ;; ensure that refiling saves buffers
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  ;; Make sure we display inline images by default
  (org-startup-with-inline-images t)

  ;; Finally a post setup func to setup fonts
  (zamlz/org-font-setup))
#+end_src

** Task Categories

#+begin_src emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "|" "DONE(d)")
              (sequence "ROUTINE(r)" "|" "DONE(d)")
              (sequence "PROJECT(p)" "|" "COMPLETED(d)" "CANCELLED(c)")
              (sequence "WAITING(w)" "|")
              (sequence "|" "CANCELLED(c)")
              (sequence "SOMEDAY(s)" "|" "CANCELLED(c)")
              (sequence "MEETING(m)" "|"))))
#+end_src

** Task Colors

The first version here works nice with the =doom-nord= theme. The second version here works better with my custom gruvbox theme.

#+begin_src emacs-lisp
;; (setq org-todo-keyword-faces
;;   '(("DONE"      . (:background "#98be65" :foreground "#ffffff" :weight bold))
;;     ("TODO"      . (:background "#ff6c6b" :foreground "#ffffff" :weight bold))
;;     ("ROUTINE"   . (:background "#3f444a" :foreground "#51afef" :weight bold))
;;     ("PROJECT"   . (:background "#51afef" :foreground "#ffffff" :weight bold))
;;     ("COMPLETED" . (:background "#98be65" :foreground "#ffffff" :weight bold))
;;     ("WAITING"   . (:background "#3f444a" :foreground "#ffffff" :weight bold))
;;     ("CANCELLED" . (:background "#181818" :foreground "#ffffff" :weight bold))
;;     ("SOMEDAY"   . (:background "#3f444a" :foreground "#ffffff" :weight bold))
;;     ("MEETING"   . (:background "#a9a1e1" :foreground "#ffffff" :weight bold))))
#+end_src

#+begin_src emacs-lisp
(setq org-todo-keyword-faces
  '(("DONE"      . (:background "#b8bb26" :foreground "#000000" :weight bold))
    ("TODO"      . (:background "#fb4934" :foreground "#000000" :weight bold))
    ("ROUTINE"   . (:background "#689d6a" :foreground "#000000" :weight bold))
    ("PROJECT"   . (:background "#458588" :foreground "#000000" :weight bold))
    ("COMPLETED" . (:background "#b8bb26" :foreground "#000000" :weight bold))
    ("WAITING"   . (:background "#d79921" :foreground "#000000" :weight bold))
    ("CANCELLED" . (:background "#181818" :foreground "#fb4934" :weight bold))
    ("SOMEDAY"   . (:background "#3f444a" :foreground "#000000" :weight bold))
    ("MEETING"   . (:background "#b16286" :foreground "#000000" :weight bold))))

#+end_src

** Better Heading Bullets

The default bullets are asteriks and thats just plain ugly. We change it to some nice unicode characters. I should also look into =org-superstar-mode= as well at some point.

#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "●" "○" "●" "○" "●" "○")))
  ;; (org-bullets-bullet-list '("◇")))
#+end_src

** Center Org buffers

Center the org buffers and remove line numbers to reduce visual clutter.

#+begin_src emacs-lisp
(defun zamlz/org-mode-visual-fill ()
  (setq visual-fill-column-width zamlz/default-screen-width
        ;; visual-fill-column-extra-text-width (0 . 1000)
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

 (use-package visual-fill-column
   :hook (org-mode . zamlz/org-mode-visual-fill))
#+end_src

** Org Keybindings
*** Default Keybindings

Just some keybindings to access various =org-mode= commands.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
#+end_src

*** Org Mode Quick Access

Just quick access to my most used org-mode functions via the leader key.

#+begin_src emacs-lisp
(zamlz/leader-keys
  "o"  '(:ignore t :which-key "Org Mode")
  "oa" '(org-agenda-list :which-key "Org Agenda Weekly View")
  "oo" '(org-capture :which-key "Org Capture Templates")
  "oi" '((lambda () (interactive)
           (find-file (concat org-directory "/inbox.org"))
           (message "Opened:  %s" (buffer-name)))
         :which-key "Inbox")
  "og" '((lambda () (interactive)
           (find-file (concat org-directory "/gtd.org"))
           (message "Opened:  %s" (buffer-name)))
         :which-key "GTD")
  "oj" '((lambda () (interactive)
           (find-file (concat org-directory "/journal.org"))
           (message "Opened:  %s" (buffer-name)))
         :which-key "Journal"))
#+end_src

** Org Capture Templates
*** DOCT: Declarative Org Capture Templates

DOCT is a cool package that lets me build =org-capture= templates with ease. It's really way more readable than the original syntax.

#+begin_src emacs-lisp
(use-package doct
  :ensure t
  ;;recommended: defer until calling doct
  :commands (doct))
#+end_src

*** Template Definitions

Org mode template definitions in the doct format

#+begin_src emacs-lisp
(setq org-capture-templates
      (doct '(("Todo, Meetings, Projects and more!" :keys "t"
               :file "inbox.org"
               :type entry
               :prepend t
               :template ("* %{todo-state} %^{Description}"
                          ":PROPERTIES:"
                          ":Created: %U"
                          ":END:"
                          "%?")
               :children (("Todo Task" :keys "t"
                           :todo-state "TODO")
                          ("Routine/Habit" :keys "r"
                           :todo-state "ROUTINE")
                          ("Project Group" :keys "p"
                           :todo-state "PROJECT")
                          ("Someday/Maybe" :keys "s"
                           :todo-state "SOMEDAY")
                          ("Meeting/Appointment" :keys "m"
                           :todo-state "MEETING")
                          ("Todo Task (context)" :keys "i"
                           :todo-state "TODO"
                           :template ("* %{todo-state} %^{Description}"
                                      ":PROPERTIES:"
                                      ":Created: %U"
                                      ":END:"
                                      "%?"
                                      "%i"
                                      "%a"))))
              ("Journal Entries and Data Capture" :keys "j"
               :file "journal.org"
               :type entry
               :datetree t
               :template ("* %U :JOURNAL:%{extra-tags}"
                          "%?")
               :children (("Journal (now)" :keys "j"
                           :extra-tags "REALITY:")
                          ("Journal (dream)" :keys "d"
                           :extra-tags "DREAM:")
                          ("Journal (context)" :keys "i"
                           :template ("* %U :JOURNAL:CONTEXT:"
                                      "%?"
                                      "%i"
                                      "%a")))))))
#+end_src

** Literate Programming with Babel

Babel is basically like jupyter notebooks for =org-mode= but its also way more powerful! Below we also configure quick access structure templates to write src blocks with ease. Babel is already a part of emacs so we must just configure it. To get a list of what languages you can configure for babel, take a look [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][here]]!

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (gnuplot . t)
   (latex . t)
   ))

(setq org-confirm-babel-evaluate nil
  org-src-fontify-natively t
  org-src-strip-leading-and-trailing-blank-lines t
  org-src-preserve-indentation nil
  org-src-tab-acts-natively t
  org-edit-src-content-indentation 0)

;; Setup structure templates for org-babel
(require 'org-tempo)
(add-to-list `org-structure-template-alist '("sh" . "src shell"))
(add-to-list `org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list `org-structure-template-alist '("py" . "src python"))
(add-to-list `org-structure-template-alist '("rc" . "src conf"))
#+end_src

** LaTeX Inline Preview

Pretty straightforward except that you need to have =latex= installed and also =dvi2png= as well. Need to figure out how to configure the size of the generated latex image.

#+begin_src emacs-lisp
(setq org-startup-with-latex-preview t)
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.0))
#+end_src

** Habit Tracking

Enables habit tracking in =org-mode= via =org-habit=.

#+begin_src emacs-lisp
(add-to-list 'org-modules 'org-habit t)
(setq org-habit-preceding-days 31)
(setq org-habit-following-days 3)
(setq org-habit-show-habits-only-for-today t)
(setq org-habit-show-all-today t)
#+end_src

** Roam Notes

=org-roam= is a useful package for taking notes.

#+begin_src emacs-lisp
(setq org-roam-directory "~/usr/notes/")

(use-package org-roam
  :ensure t
  :hook (after-init . org-roam-mode)
  :bind (:map org-roam-mode-map
         (("C-c n l" . org-roam)
         ("C-c n f" . org-roam-find-file)
         ("C-c n g" . org-roam-graph))
         :map org-mode-map
         (("C-c n i" . org-roam-insert))
         (("C-c n I" . org-roam-insert-immediate))))
#+end_src

** Roam Daily Notes

#+begin_src emacs-lisp
(setq org-roam-dailies-directory "daily/")

(setq org-roam-dailies-capture-templates
      '(("d" "default" entry
         #'org-roam-capture--get-point
         "* %U\n%?"
         :file-name "daily/%<%Y-%m-%d>"
         :head "#+TITLE: %<%Y-%m-%d>\n#+ROAM_TAGS: JOURNAL\n\n"
         :olp ("[[file:./20210212192038-daily_journal.org][Daily Journal Entry]]"))))
#+end_src

** Roam Quick Access

#+begin_src emacs-lisp
(zamlz/leader-keys
  "n"  '(:ignore t :which-key "Org Roam Notes")
  "nt" '(org-roam-dailies-capture-today :which-key "Roam Daily Capture Today")
  "ny" '(org-roam-dailies-capture-yesterday :which-key "Roam Daily Capture Yesterday"))
#+end_src

** Roam Server

=org-roam-server= provides a useful way to view my notes in a graph like view. I can also open them from this view as well.

#+begin_src emacs-lisp
(use-package org-roam-server
  :ensure t
  :custom
  (org-roam-server-host "127.0.0.1"
   org-roam-server-port 8080
   org-roam-server-authenticate nil
   org-roam-server-export-inline-images t
   org-roam-server-serve-files nil
   org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
   org-roam-server-network-poll t
   org-roam-server-network-arrows t
   org-roam-server-network-label-truncate t
   org-roam-server-network-label-truncate-length 60
   org-roam-server-network-label-wrap-length 20)
  :init
  (org-roam-server-mode))
#+end_src

* Misc Packages
** Vterm

Installs a better virtual terminal to use within emacs. I'm just playing around with this for now.

#+begin_src emacs-lisp
(use-package vterm)
  ;; :custom (vterm-shell "/bin/fish"))
#+end_src
** Ledger

#+begin_src emacs-lisp
(use-package ledger-mode)
#+end_src

** Beancount

Beancount is a plain text accounting ledger-like program that I've been experimenting with. This simply just adds the mode via **on-disk** extension. If the extension is missing, emacs will complain. Make sure to pull it from the repo!

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/beancount-mode")
(require 'beancount)
(add-to-list 'auto-mode-alist '("\\.lgr\\'" . beancount-mode))
(add-hook 'beancount-mode-hook #'outline-minor-mode)
#+end_src

** xkcd

A simple plugin for getting the today's xkcd comic.

#+begin_src emacs-lisp
(use-package xkcd)
#+end_src
