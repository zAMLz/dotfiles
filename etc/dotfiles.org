#+TITLE: My Personal Dotfiles
#+AUTHOR: Amlesh Sivanantham (zamlz)
#+CREATED: [2021-02-18 Thu 15:09]
#+LAST_MODIFIED: [2021-03-12 Fri 12:41:43]
#+EXCLUDE_TAGS: TOC
#+OPTIONS: broken-links:t
#+STARTUP: overview
# ... Present day, present time ...

[[./xkcd.png]]

It's actually incredible how accurate this xckd comic is...

* Table of Contents                                                     :TOC:
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#operating-system][Operating System]]
  - [[#gentoo-linux][Gentoo Linux]]
- [[#shell-environment][Shell Environment]]
  - [[#zsh][Zsh]]
    - [[#environment-configuration][Environment Configuration]]
    - [[#interactive-session][Interactive Session]]
      - [[#zsh-configuration][Zsh Configuration]]
      - [[#load-autocompletion-engine][Load Autocompletion Engine]]
      - [[#source-aliases-and-functions][Source Aliases and Functions]]
      - [[#configure-ssh--gnupg-variables][Configure SSH & GnuPG Variables]]
      - [[#setup-ps1][Setup $PS1]]
      - [[#override-ls-colors][Override LS Colors]]
      - [[#enter-a-python-virtual-environment][Enter a Python Virtual Environment]]
      - [[#emacs-vterm-shell-side-integration][Emacs Vterm Shell-side Integration]]
    - [[#login-script][Login Script]]
    - [[#functions][Functions]]
      - [[#gnupg-utilities][GnuPG Utilities]]
      - [[#groot][Groot]]
      - [[#one-of-my-many-prompts][One of my many prompts]]
      - [[#python-venv-wrapper][Python Venv Wrapper]]
      - [[#x-window-terminal-info][X Window Terminal Info]]
    - [[#aliases][Aliases]]
  - [[#git][Git]]
    - [[#user-profile][User Profile]]
    - [[#gnupg][GnuPG]]
    - [[#core][Core]]
    - [[#commit-settings][Commit Settings]]
    - [[#diff-settings][Diff Settings]]
    - [[#pull-settings][Pull Settings]]
    - [[#aliases][Aliases]]
  - [[#openssh][OpenSSH]]
    - [[#gnupg-connect-agent][GnuPG Connect Agent]]
  - [[#neovim][Neovim]]
    - [[#load-vim-plugins-vimplug][Load Vim Plugins (VimPlug)]]
    - [[#configure-loaded-plugins][Configure loaded plugins]]
      - [[#vim-airline][Vim Airline]]
      - [[#git-gutter][Git Gutter]]
      - [[#indent-lines][Indent Lines]]
      - [[#vim-ledger][Vim Ledger]]
      - [[#markdown][Markdown]]
      - [[#vim-wiki][Vim Wiki]]
    - [[#setup-sane-vim-defaults][Setup Sane Vim Defaults]]
    - [[#vim-colorschemes][Vim Colorschemes]]
    - [[#custom-keybindings][Custom Keybindings]]
    - [[#custom-vim-functions][Custom Vim Functions]]
      - [[#trim-whitespace][Trim Whitespace]]
      - [[#toggle-calendar][Toggle Calendar]]
    - [[#vim-mode-line][Vim mode line]]
  - [[#tmux][Tmux]]
    - [[#basic-config][Basic Config]]
    - [[#keybindings][Keybindings]]
    - [[#window-settings][Window Settings]]
    - [[#status-bar][Status Bar]]
    - [[#pane][Pane]]
    - [[#reload-config][Reload Config]]
- [[#desktop-environment][Desktop Environment]]
  - [[#xorg-x11-window-system][Xorg X11 Window System]]
    - [[#source-colorscheme][Source Colorscheme]]
    - [[#xft-font-settings][Xft Font Settings]]
    - [[#default-font-face][Default Font Face]]
    - [[#rxvt-unicode-terminal][Rxvt Unicode Terminal]]
      - [[#general-settings][General Settings]]
      - [[#transparency][Transparency]]
      - [[#misc-ui-changes][Misc UI Changes]]
      - [[#clipboard-keybindings][Clipboard Keybindings]]
      - [[#colorscheme-and-font][Colorscheme and Font]]
    - [[#rofi-dmenu][Rofi Dmenu]]
      - [[#enabled-modes][Enabled Modes]]
      - [[#window-geometry][Window Geometry]]
      - [[#colorscheme-and-font][Colorscheme and Font]]
      - [[#unused-rofi-settings][Unused Rofi Settings]]
    - [[#emacs][Emacs]]
  - [[#sxhkd---simple-x-hotkey-daemon][Sxhkd - Simple X Hotkey Daemon]]
    - [[#terminal-exec-keybindings][Terminal Exec Keybindings]]
    - [[#rofi-dmenu-launcher-keybindings][Rofi Dmenu Launcher Keybindings]]
    - [[#scrot-keybindings][Scrot Keybindings]]
    - [[#media-control-keybindings][Media Control Keybindings]]
  - [[#herbstluftwm-manual-tiling-window-manager][Herbstluftwm Manual Tiling Window Manager]]
    - [[#initial-configuration][Initial Configuration]]
    - [[#wm-custom-rules][WM Custom Rules]]
    - [[#source-xorg-universal-settings][Source Xorg Universal Settings]]
    - [[#keybindings][Keybindings]]
      - [[#setup][Setup]]
      - [[#reload-wm-and-close-window][Reload WM and Close Window]]
      - [[#window-focus][Window Focus]]
      - [[#window-movement][Window Movement]]
      - [[#splitting-frames][Splitting Frames]]
      - [[#resizing-frames][Resizing Frames]]
      - [[#workspace-definitions-tags][Workspace Definitions (tags)]]
      - [[#workspace-movement][Workspace Movement]]
      - [[#layout-control][Layout Control]]
      - [[#mouse-control][Mouse Control]]
      - [[#colorscheme-cylcing][Colorscheme Cylcing]]
    - [[#theme-configuration][Theme Configuration]]
      - [[#source-colorscheme][Source Colorscheme]]
      - [[#what-does-this-do-again][What does this do again?]]
      - [[#frame-appearance][Frame Appearance]]
      - [[#window-appearance][Window Appearance]]
      - [[#tree-view][Tree View]]
      - [[#montior-setup][Montior Setup]]
      - [[#configure-panel-height][Configure Panel Height]]
    - [[#event-hooks][Event Hooks]]
      - [[#event-hooks-startup-verification][Event Hooks Startup Verification]]
      - [[#event-hooks-trigger-definition][Event Hooks Trigger Definition]]
      - [[#initialize-event-hooks][Initialize Event Hooks]]
  - [[#lemonbar-panel][Lemonbar Panel]]
    - [[#panel-launcher][Panel Launcher]]
    - [[#default-configuration][Default Configuration]]
  - [[#compton-x11-compositor][Compton X11 Compositor]]
    - [[#backend][Backend]]
    - [[#glx-backend][GLX backend]]
    - [[#shadows][Shadows]]
    - [[#opacity][Opacity]]
    - [[#fading][Fading]]
    - [[#other][Other]]
    - [[#window-type-settings][Window Type Settings]]
  - [[#zathura-pdf-reader][Zathura PDF Reader]]
    - [[#re-color-pages][Re-Color Pages]]
    - [[#highlighting][Highlighting]]
- [[#gnuemacs-configuration][GNU/Emacs Configuration]]
  - [[#internal-configuration][Internal Configuration]]
    - [[#garbage-collector-hooks][Garbage Collector Hooks]]
    - [[#package-management][Package Management]]
    - [[#basic-ui-changes][Basic UI Changes]]
    - [[#setup-personal-inf][Setup Personal Inf]]
    - [[#disable-default-startup][Disable Default Startup]]
    - [[#modernize-selection-behaviour][Modernize Selection Behaviour]]
    - [[#disable-scroll-bar][Disable Scroll-Bar]]
    - [[#enable-column-numbers][Enable Column Numbers]]
    - [[#split-and-follow-windows][Split and Follow Windows]]
    - [[#backup-and-autosave-files][Backup and Autosave Files]]
    - [[#auto-refresh-changes-from-external-buffers][Auto-Refresh Changes from External Buffers]]
    - [[#eldoc-documentation][Eldoc Documentation]]
    - [[#mouse-wheel-scroll-speed][Mouse Wheel Scroll Speed]]
    - [[#highlight-matching-parentheses][Highlight Matching Parentheses]]
    - [[#auto-pairing-quotes-and-parentheses][Auto-pairing Quotes and Parentheses]]
    - [[#clean-whitespace-on-buffer-save][Clean Whitespace on Buffer Save]]
    - [[#dump-custom-set-variables][Dump Custom-Set-Variables]]
    - [[#dired-customization][Dired Customization]]
  - [[#ui-customization][UI Customization]]
    - [[#startup-dashboard][Startup Dashboard]]
    - [[#font-configuration][Font Configuration]]
    - [[#keybinding-configuration][Keybinding Configuration]]
      - [[#esc-should-save-the-day][ESC should save the day]]
      - [[#evil-mode][Evil Mode]]
      - [[#extend-evil-mode-with-evil-collection][Extend Evil Mode with Evil Collection]]
      - [[#evil-commentary][Evil Commentary]]
      - [[#which-key][Which Key]]
      - [[#general-keybinder][General Keybinder]]
      - [[#hydra][Hydra]]
    - [[#leader-keybindings][Leader Keybindings]]
      - [[#misc-shortcuts][Misc Shortcuts]]
      - [[#text-size-scaling][Text Size Scaling]]
    - [[#ivy-counsel-and-swiper][Ivy, Counsel and Swiper]]
      - [[#ivy][Ivy]]
      - [[#counsel][Counsel]]
      - [[#swiper][Swiper]]
      - [[#ivy-rich][Ivy Rich]]
    - [[#helm-incremental-completion-framework][Helm Incremental Completion Framework]]
    - [[#helm-describe-bindings][Helm Describe Bindings]]
    - [[#helpful-help-commands][Helpful Help Commands]]
    - [[#themes-and-appearance][Themes and Appearance]]
      - [[#modeline][Modeline]]
      - [[#color-theme][Color Theme]]
      - [[#rainbow-delimiters][Rainbow Delimiters]]
      - [[#syntax-highlighting][Syntax Highlighting]]
      - [[#rainbow-mode][Rainbow Mode]]
      - [[#transparency][Transparency]]
    - [[#dired-improvements][Dired Improvements]]
      - [[#single-dired-buffer][Single Dired Buffer]]
      - [[#icons-for-dired][Icons for Dired]]
      - [[#hide-dotfiles][Hide Dotfiles]]
    - [[#daemon-and-client-hooks][Daemon and Client Hooks]]
  - [[#development-and-project-management][Development and Project Management]]
    - [[#languages][Languages]]
      - [[#language-server-protocol][Language Server Protocol]]
      - [[#python][Python]]
      - [[#ccjava][C/C++/Java]]
    - [[#company-auto-completion-for-programming-languages][Company Auto-Completion for Programming Languages]]
    - [[#flycheck-syntax-linter][Flycheck Syntax Linter]]
    - [[#projectile][Projectile]]
    - [[#magit-git-interface][Magit Git Interface]]
    - [[#forge][Forge]]
    - [[#markdown-mode][Markdown Mode]]
    - [[#web-mode][Web Mode]]
  - [[#org-mode][Org Mode]]
    - [[#better-font-faces-hook][Better Font Faces Hook]]
    - [[#mode-startup-hooks][Mode Startup Hooks]]
    - [[#basic-configuration][Basic Configuration]]
    - [[#task-categories][Task Categories]]
    - [[#task-colors][Task Colors]]
    - [[#better-heading-bullets][Better Heading Bullets]]
    - [[#center-org-buffers][Center Org buffers]]
    - [[#org-keybindings][Org Keybindings]]
      - [[#default-keybindings][Default Keybindings]]
      - [[#org-mode-quick-access][Org Mode Quick Access]]
    - [[#org-capture-templates][Org Capture Templates]]
      - [[#doct-declarative-org-capture-templates][DOCT: Declarative Org Capture Templates]]
      - [[#template-definitions][Template Definitions]]
    - [[#org-make-toc][Org Make TOC]]
    - [[#literate-programming-with-babel][Literate Programming with Babel]]
    - [[#auto-tangle-configuration-file][Auto-Tangle Configuration File]]
    - [[#latex-inline-preview][LaTeX Inline Preview]]
    - [[#habit-tracking][Habit Tracking]]
    - [[#org-download][Org Download]]
    - [[#org-last-modified-timestamp][Org Last Modified Timestamp]]
    - [[#roam-notes][Roam Notes]]
    - [[#roam-capture-templates][Roam Capture Templates]]
    - [[#roam-daily-notes][Roam Daily Notes]]
    - [[#roam-quick-access][Roam Quick Access]]
    - [[#roam-server][Roam Server]]
  - [[#misc-packages][Misc Packages]]
    - [[#vterm][Vterm]]
    - [[#ledger][Ledger]]
    - [[#beancount][Beancount]]
    - [[#xkcd][xkcd]]
:END:
* Operating System
** TODO Gentoo Linux
* Shell Environment
** Zsh
*** Environment Configuration
:PROPERTIES:
:header-args:shell: :tangle ~/.zshenv
:END:

Source system profile

#+begin_src shell
source /etc/profile
#+end_src

Need to source this file which contains locations for all my repos

#+begin_src shell
source $HOME/lib/repos
#+end_src

Update path to use my custom scripts and other locally installed scripts.

#+begin_src shell
# Update the path variable
export PATH="$HOME/bin:$PATH"
export PATH="$HOME/.local/bin/:$PATH"
export PATH="$LEDGER_DIR/bin:$PATH"
export PATH="$VIMWIKI_DIR/bin:$PATH"

# Update any system specific path settings
source $HOME/sys/path.sh 2> /dev/null
#+end_src

Collection system information

#+begin_src shell
# Get system info
export WSL=$(uname -r | grep "microsoft")
export DISTRO=$(grep --color=none ^ID= /etc/os-release \
    | sed -e 's/^ID=//g' \
    | tr -d '"')
#+end_src

Configure =less= arguments if we are in a windows linux subsystem. It doesn't support some of the standard arguments you would see in a normal =less=.

#+begin_src shell
# Override default windows less arguments
if [ -z "$WSL" ]; then
    export LESS='-R --mouse --wheel-lines=3 --no-init --quit-if-one-screen'
else
    export LESS='-R --no-init --quit-if-one-screen'
fi
#+end_src

Why am I settings my python venv directory here? This could be improved...

#+begin_src shell
# Set the python venv dir
export PYTHON_VENVS_DIR="$HOME/.local/share/python-venvs"
if [ -d "$PYTHON_VENVS_DIR" ]; then
    mkdir -p "$PYTHON_VENVS_DIR"
fi

# Specify location of ledger file
export LEDGER_FILE="$LEDGER_DIR/main.journal"
#+end_src

When using zsh inside emacs, we also need to update the editor. You definetely do not want to open up vim while inside the terminal with nearly no way to get out. Maybe I should move the alias into /not this file/.

#+begin_src shell
if [ -n "$INSIDE_EMACS" ]; then
    export VISUAL="emacsclient --socket-name=xorg-emacs-daemon"
    export EDITOR="$VISUAL"
    alias vi="$EDITOR" # lmao
fi
#+end_src

Configure Zsh command history

#+begin_src shell
HISTFILE=$HOME/.zhistory
HISTSIZE=10000
SAVEHIST=5000
#+end_src

This is sort of a weird hack. Basically, we're setting the pinentry program here before we even get to the =~/.zshrc= file. The reason is that we want pinentry to default to /GUI/ based applications instead of the /tty/. But if we enter an interactive shell environment (where =~/.zshrc= would be invoked), then we set it back to /tty/.

#+begin_src shell
export PINENTRY_USER_DATA='rofi'
#+end_src

*** Interactive Session
:PROPERTIES:
:header-args:shell: :tangle ~/.zshrc
:END:
**** Zsh Configuration

Configure how zsh remembers history.

#+begin_src shell
setopt EXTENDED_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
#+end_src

Other useful defaults like auto-cd and turning off terminal beeps!

#+begin_src shell
setopt AUTO_CD
unsetopt BEEP # turn of audible beeps
#+end_src

Setup Vim Bindings in Zsh.

#+begin_src shell
bindkey -v
#+end_src

**** Load Autocompletion Engine

The directory we store the completion file will already exist due to the tangling of other zsh files.

#+begin_src shell
autoload -Uz compinit && compinit -d "$HOME/.zsh.d/compdump"
autoload -U bashcompinit && bashcompinit
#+end_src

**** Source Aliases and Functions

#+begin_src shell
source $HOME/.zsh.d/aliases.zsh
source $HOME/.zsh.d/functions.zsh
#+end_src

**** Configure SSH & GnuPG Variables

I don't know what to make of this. I thought I could have this code block in the =~/.zshenv= file but I was unable to do so as it causing many issues. Seems like it needs to be set during an interactive session. Very strange indeed.

#+begin_src shell
export GPG_TTY=$(tty)
export PINENTRY_USER_DATA='tty'
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket);
#+end_src

**** Setup $PS1

There are basically two ways to set prompts. My old prompt was dynamic and required a function to run everytime it generated so we used the precmd cood to generate it. However it introduces some problems with =sh= if you want to run it from =zsh=. Luckily, if you wish to run =sh= from =zsh= for whatever reason, one can simply override the hook before the command is run.

I however, am currently not using this setup, but I should configure it such that if I am in a pure terminal environment that I do in fact use my more /verbose/ prompt. In my gui environment however, that level of information is overkill.

#+begin_src shell
### NOTE: Look at the function definition for prompt_generate()
# precmd() {
#     export PROMPT=$(prompt_generate)
# }

export PS1="%F{blue}%~%f %B%(?.%F{green}.%F{red})λ%f%b "
#+end_src

**** Override LS Colors

The =ls= command is sometimes not colored properly (and I may have some custom colors that it doesn't like using for certain files by default) so lets override that here. Maybe I should have this in the =~/.zshenv= file?

#+begin_src shell
eval $(dircolors -b $HOME/lib/shell/lscolors)
#+end_src

**** Enter a Python Virtual Environment

If certain =$VIRTUAL_ENV= exist during session startup, then immediately jump into that python virtual environment.

#+begin_src shell
if [ -n "$VIRTUAL_ENV" ]; then
    source ${VIRTUAL_ENV}/bin/activate
fi
#+end_src

**** Emacs Vterm Shell-side Integration

Woah what is a function doing here!?

Well, Vterm (emacs) requires some shell-side configuration in order to make use of its full functionality. It's quite powerful when as you can jump between prompts and other things. Basically although its a function, I'm keeping it here so that all shell-side code is in one place.

#+begin_src shell
vterm_printf() {
    if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ] ); then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}
#+end_src

This is used to pass information about =user=, =hostname=, and =pwd= back to vterm.

#+begin_src shell
vterm_prompt_end() {
    vterm_printf "51;A$(whoami)@$(hostname):$(pwd)";
}
setopt PROMPT_SUBST
PROMPT=$PROMPT'%{$(vterm_prompt_end)%}'
#+end_src

Adding another zsh hook to capture changes in directory I believe. This ultimately is used to set the buffer name for vterm in emacs buffer list.

#+begin_src shell
autoload -U add-zsh-hook
add-zsh-hook -Uz chpwd (){ print -Pn "\e]2;%m:%2~\a" }
#+end_src

*** Login Script
:PROPERTIES:
:header-args:shell: :tangle ~/.zlogin
:END:

Need a logger just to keep track of things

#+begin_src shell
source $HOME/lib/shell/logger
LOGGER=$(get_logger zsh.profile)
#+end_src

Setup herbstluftwm window manager during login

#+begin_src shell
# Regular StartX Boot for Herbsluftwm
if [ -z "$DISPLAY" ] && [ "$(fgconsole 2>/dev/null)" -eq 1 ]; then
    $LOGGER "Starting xinitrc parameterized on herbstluftwm"
    export WINDOW_MANAGER='herbstluftwm'
    exec startx $HOME/etc/xorg/xinitrc herbstluftwm
fi
#+end_src

The remaining =tty= are for testing or recovery purposes. I primarily use =tty2= for testing new window managers. In the case below, I'm trying out emacs as a window manager.

#+begin_src shell
# Regular StartX Boot for Emacs
elif [ -z "$DISPLAY" ] && [ "$(fgconsole 2>/dev/null)" -eq 2 ]; then
    $LOGGER "Starting xinitrc parameterized on emacs"
    export WINDOW_MANAGER='exwm'
    exec startx $HOME/etc/xorg/xinitrc exwm
fi
#+end_src

*** Functions
:PROPERTIES:
:header-args:shell: :tangle ~/.zsh.d/functions.zsh :mkdirp yes
:END:
**** GnuPG Utilities

Simple helper function to encrypt files  with gpg

#+begin_src shell
function gpg-lock() {
    infile=$1
    if [ -z "$(echo $infile | grep -E '.+\.gpg$')" ]; then
        gpg_id=$(cat ~/.gpg-id)
        outfile="${1}.gpg"
        gpg --output $outfile -r $gpg_id --encrypt $infile
    else
        echo "Trying to encrypt already encrypted file"
    fi
}
#+end_src

Simple helper function to decrypt files with gpg

#+begin_src shell
function gpg-unlock() {
    infile=$1
    if [ -n "$(echo $infile | grep -E '.+\.gpg$')" ]; then
        outfile=$(echo ${infile} | sed -e 's/\.gpg$//g')
        gpg --output $outfile --decrypt $infile
    else
        echo "Not a valid gpg locked file; Unable to unlock!"
    fi
}
#+end_src

**** Groot

I wrote a simple script to get me details of a git repo. Absolutely pointless lol.

#+begin_src shell
function groot() {
    GITROOT=$(git rev-parse --show-toplevel 2> /dev/null);
    ROOTEXIST=$?

    if [ $ROOTEXIST -eq 0 ]; then

        cd $GITROOT;
        NAME=$(basename -s .git `git config --get remote.origin.url` 2> /dev/null)

        if [ -z "$NAME" ]; then
            NAME="[ ]"
        fi

        BRANCH=$(git branch --list --no-color | cut -d " " -f 2 | tr -d '\n');
        figlet -t -f slant $@ "${NAME} @.${BRANCH}" | lolcat

        git status
    fi
}
#+end_src

**** One of my many prompts

I really like this prompt. I should probably set this up such that it's only used when I'm using the =tty=. Here is what is normally looks like:

#+begin_src
.-|ssh|-(amlesh@xanadu)-[debian::~/src/website]-<website.master>
`-->
#+end_src

#+begin_src shell
function prompt_generate() {
    echo -ne "%B%F{cyan}.-"

    # Check if we are in an SSH connection
    if [ -n "$SSH_TTY" ]; then
        echo -ne "%F{black}|%b%F{blue}ssh%F{black}%B|%F{cyan}-"
    fi

    # user @ hostname
    echo -ne "%F{black}(%b%F{cyan}%n%F{white}@%F{magenta}%M%F{black}%B)"

    # distro :: current working directory
    echo -ne "%F{cyan}-%F{black}[%b%F{cyan}${DISTRO}"
    echo -ne "%F{white}::%F{blue}%~%B%F{black}]"

    if [ -d "`git rev-parse --show-toplevel 2> /dev/null`/.git" ]; then

        GIT_NAME=$(basename -s .git `git config --get remote.origin.url` \
            2> /dev/null)
        GIT_NAME=$(echo $GIT_NAME | sed -e 's|^.*:||g')

        if [ -z "$GIT_NAME" ]; then
            GIT_NAME="[?]"
        fi

        GIT_BRANCH=$(git branch --list --no-color | grep --color=auto '\*' \
            | sed -e 's/^\* //g' | head -n1 | tr -d '\n')

        # (yes/no add ; no commited)
        #YA=$(git status --porcelain 2>/dev/null| egrep "^M" | wc -l)
        #NA=$(git status --porcelain 2>/dev/null| egrep "^ M" | wc -l)
        NC=$(git status --porcelain 2>/dev/null| egrep "^(M| M | D)" | wc -l)

        # Use this info to construct our real status
        if [ $NC -eq 0 ]; then
            C='green'
        else
            C='red'
        fi
        echo -ne "%F{cyan}-%F{black}<%b%F{$C}$GIT_NAME.$GIT_BRANCH%B%F{black}>"

    fi
    if [ -n "${ENV_NAME}${PIPENV_ACTIVE}${VIRTUAL_ENV}" ]; then

        echo -ne "%F{cyan}-%F{black}{%b%F{yellow}"
        MOD=""

        if [ -n "$VIRTUAL_ENV" ]; then
            # Support both the old way of using venvs and new way
            echo -ne "venv:$(basename $VIRTUAL_ENV /.venv)"
            MOD="/"
        fi

        if [ -n "$PIPENV_ACTIVE" ]; then
            echo -ne "${MOD}pipenv"
            MOD="/"
        fi

        if [ -n "$ENV_NAME" ]; then
            echo -ne "$MOD$ENV_NAME"
        fi

        echo -ne "%B%F{black}}"
    fi
    echo -ne "\n"
    echo -ne "%F{cyan}\`--%B%F{white}> %{\e[0m%}"
}
#+end_src

**** Python Venv Wrapper

There may be a better solution to this, but I just like using the built in =venv= that is part of =python3=. But its a pain to write out every command so this does a lot of things.

#+begin_src shell
function venv() {
    # A simple wrapper for virtualenv
    PYTHON_VENVS_DIR=${PYTHON_VENVS_DIR:-$HOME/.venvs}
    if [[ ! -z "$@" ]]; then
        vname=$1;
        shift;
        if [[ -z "$@" ]]; then
            if [[ ! -d "$PYTHON_VENVS_DIR/$vname" ]]; then
                echo "Create a new virtual environment named '$vname' ?";
                echo 'Press any key to continue or Ctrl+C to exit...\n'
                # note this is zsh read
                read -k1 -rs
                echo "Creating new venv: $vname";
                python -m venv $PYTHON_VENVS_DIR/$vname
            fi
            echo "Starting venv: $vname"
            source $PYTHON_VENVS_DIR/${vname}/bin/activate
            save_window_info
        else
            python -m venv $PYTHON_VENVS_DIR/$vname $@
            save_window_info
        fi
    else
        echo "Python Virtual Environments (venvs)"
        tree -L 1 -d --noreport $PYTHON_VENVS_DIR/ | tail -n +2
    fi
}
#+end_src

**** X Window Terminal Info

Basically this lets me open up new windows withing the same directory that another existing terminal is in (so I don't have to =cd= into it). This works by a couple of hacks. Save window information for each x-window terminal session when we spawn it. Override the default =cd= so that we also save every directory change. We also save python venv information as well. We also want to make sure we only do this when an X11 display exists.

#+begin_src shell
function window_info() {
    echo "WINDOW_PWD='$(pwd)'";
    echo "VIRTUAL_ENV='${VIRTUAL_ENV}'";
}
#+end_src

#+begin_src shell
function save_window_info() {
    window_info > /tmp/.wid_${WINDOWID}
}
#+end_src

Overrides default =cd= and also saves the terminal info at initial startup

#+begin_src shell
if [ -n "$DISPLAY" ]; then
    # Build our custom cd
    function cd () {
        builtin cd $@
        save_window_info
    }
    # Every terminal should generate its id file on spawn
    if [ -z "$WINDOWID" ]; then
        # echo "Terminal doesn't have a Window ID!!!"
    else
        save_window_info
    fi
fi
#+end_src

*** Aliases
:PROPERTIES:
:header-args:shell: :tangle ~/.zsh.d/aliases.zsh :mkdirp yes
:END:

Shortcuts for =ls=

#+begin_src shell
alias ls="LC_COLLATE=C ls -F --color=always"
alias ll="ls -oh"
alias la="ls -lah"
#+end_src

Shortcuts for =git=

#+begin_src shell
alias gs="git status"
alias ga="git add"
alias gc="git commit"
alias gd="git diff"
alias gds="git diff --staged"
alias gl="git log --graph --stat -p"
alias gp="git push"
alias gf="git fetch"
alias gm="git merge"
alias gb="git branch -av"
#+end_src

These aliases are weird. This was when the term I was using was causing issues with =clear= and other utilities like =eselect=. The problem however was that I couldn't just set the =TERM= to /xterm/ globally as other utilities would also break.

#+begin_src shell
alias clear="TERM='xterm' clear"
alias eselect="TERM='xterm' eselect"
#+end_src

Make various commands pretty by default

#+begin_src shell
alias grep="grep --color=always"
alias tree="tree -C"
alias dog="pygmentize"
#+end_src

Misc things

#+begin_src shell
alias fping="ping -c 3 www.google.com"
alias weather="curl wttr.in"
#+end_src

Ricing info commands

#+begin_src shell
alias info="clear;echo;neofetch;colors;"
alias infos="info;scrot --delay 3 --count --quality 100 ~/tmp/myscrot.png"
#+end_src

Sudo improvements...

#+begin_src shell
alias please="sudo"
if [ $UID -ne 0 ]; then
    alias fuck='eval "sudo $(fc -ln -1)"'
fi
#+end_src

Make certain commands safer to use by default

#+begin_src shell
alias rm="rm -I --preserve-root"
alias mv="mv -i"
alias cp="cp -i"
#+end_src

** Git
:PROPERTIES:
:header-args:conf: :tangle ~/.gitconfig
:END:
*** User Profile

#+begin_src conf
[user]
    signingkey = 0x882C395C3B28902C
    name = Amlesh Sivanantham (zamlz)
    email = zamlz@pm.me
#+end_src

*** GnuPG

#+begin_src conf
[gpg]
    program = gpg
#+end_src

*** Core

#+begin_src conf
[core]
    pager = less
#+end_src

*** Commit Settings

#+begin_src conf
[commit]
    gpgsign = true
#+end_src

*** Diff Settings

#+begin_src conf
[diff "gpg"]
    textconv = gpg --no-tty --decrypt
#+end_src

*** Pull Settings

#+begin_src conf
[pull]
    ff = only
#+end_src

*** Aliases

These are just useful aliases I've found online

#+begin_src conf
[alias]
    branches = for-each-ref --sort=-committerdate --format=\"%(color:blue)%(authordate:relative)\t%(color:red)%(authorname)\t%(color:white)%(color:bold)%(refname:short)\" refs/remotes
    root = rev-parse --show-toplevel
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
#+end_src

** OpenSSH
:PROPERTIES:
:header-args:conf: :tangle ~/.ssh/config :mkdirp yes
:END:
*** GnuPG Connect Agent

Since we are using GPG agent as the SSH agent, when in a terminal, ssh agent doesn't know that it has to change terminals (a bug in openssh). So when it connects to gpg-agent, it uses the terminal it was last configured to use. The following command when run in a terminal updates gpg-agent to use the current terminal for openssh. However, now if we run some ssh related command in the prior terminal, it will use the new terminal instead creating the exact inverse of the problem. Therefore we attempt to fix this by running this command before every SSH command.

[[https://bugzilla.mindrot.org/show_bug.cgi?id=2824#c9][https://bugzilla.mindrot.org/show_bug.cgi?id=2824#c9]]

#+begin_src conf
Match host * exec "gpg-connect-agent --no-autostart UPDATESTARTUPTTY /bye"
#+end_src

** Neovim
:PROPERTIES:
:header-args:conf: :tangle ~/.config/nvim/init.vim :mkdirp yes
:END:
*** Load Vim Plugins (VimPlug)

#+begin_src conf
call plug#begin('~/.vim/plugged')

" vim-airline:
" Lean & mean status/tabline for vim thats light as air
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'morhetz/gruvbox'

Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

Plug 'jamessan/vim-gnupg'
Plug 'chrisbra/csv.vim'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'vimwiki/vimwiki', { 'branch': 'dev' }
Plug 'mattn/calendar-vim'

" Plug 'valloric/youcompleteme'
Plug 'yggdroot/indentline'
Plug 'mbbill/undotree'

" Language Based Plugins
Plug 'JuliaEditorSupport/julia-vim'
Plug 'ledger/vim-ledger'
Plug 'nathangrigg/vim-beancount'
Plug 'vim-scripts/gnuplot.vim'

call plug#end()
#+end_src

*** Configure loaded plugins
**** Vim Airline

#+begin_src conf
" vim-airline
let laststatus = 2
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

" vim-airline-themes
let g:airline_theme = 'base16_gruvbox_dark_hard'
#+end_src

**** Git Gutter

#+begin_src conf
" git-gutter
nmap <C-M-j> <Plug>GitGutterNextHunk
nmap <C-M-k> <Plug>GitGutterPrevHunk
let g:gitgutter_set_sign_backgrounds = 1
#+end_src

**** Indent Lines

#+begin_src conf
" Indent Lines
"let g:indentLine_char = '.'
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
let g:indentLine_setColors = 1
"let g:indentLine_bgcolor_term = 0
let g:indentLine_color_term = 8
let g:indentLine_conceallevel = 2
let g:indentLine_concealcursor = "n"
#+end_src

**** Vim Ledger

#+begin_src conf
" Configure vim ledger
let g:ledger_maxwidth = 80
let g:ledger_bin = 'ledger'
let g:ledger_extra_options = '--pedantic --explicit'
let g:ledger_align_at = 77
let g:ledger_date_format = '%Y-%m-%d'
#+end_src

**** Markdown

#+begin_src conf
" Markdown conceal
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
#+end_src

**** Vim Wiki

#+begin_src conf
" Vim Wiki
let personal_wiki = {}
let personal_wiki.name = 'Tabula Rasa'
let personal_wiki.path = '~/usr/wiki/src'
let personal_wiki.path_html = '~/usr/wiki/.html'
let personal_wiki.syntax = 'markdown'
let personal_wiki.ext = '.md'
let personal_wiki.maxhi = 1
let personal_wiki.diary_rel_path = "journal/"
let personal_wiki.diary_index = "toc"
let personal_wiki.diary_header = "Personal Journal"
let personal_wiki.diary_caption_level = 0
let personal_wiki.auto_diary_index = 1

let g:vimwiki_list = [personal_wiki]
let g:vimwiki_global_ext = 1
let g:vimwiki_listsyms = ' ○◐●✓' " '✗○◐●✓'
let g:vimwiki_folding = 'expr'
let g:vimwiki_hl_cb_checked = 2
#+end_src

*** Setup Sane Vim Defaults

#+begin_src conf
set nocompatible
set number          " Show Line numbers
set ruler           " Show line and column number of the cursor
set cursorline      " highlight current line
set cursorcolumn    " Create a column for where the cursor is
set colorcolumn=80  " Create a column to show where 80 chars are
set modeline        " Allow source files to configure vim as well
set nowrap

" TAB = 4 SPACES
set tabstop=4		" number of visual spaces per TAB
set softtabstop=4   " number of space in TAB while editing
set expandtab		" TABs are now SPACEs
set shiftwidth=4    " Allows helps to make it 4 spaces in neovim

filetype plugin on
filetype indent on  " Load filetype-specific indent files
syntax on

set wildmenu        " visual autocomplete for command menu
set lazyredraw      " redraw only when we need to

set showmatch       " highlight matching brackets [{()}]
set incsearch       " search as characters are entered
set hlsearch        " highlight matches

set noshowmode      " Stop showing the default mode

set mouse=a         " Set mouse wheel to scroll

" Code concealing
set conceallevel=2
set concealcursor-=n

" Enable Code Folding
set foldenable
set foldlevelstart=10
set foldnestmax=10
set foldmethod=indent    " fold based on ident level

" Custom file search
set path+=**
#+end_src

*** Vim Colorschemes

#+begin_src conf
" Use peachpuff built-in colorscheme as the base
colorscheme peachpuff

" Color of the Columns
highlight ColorColumn ctermbg=black
highlight CursorColumn ctermbg=black
highlight VertSplit ctermfg=black

" Change the default coloring of line numbers
highlight LineNr ctermfg=black

" Change colorscheme of Pmenus
highlight Pmenu ctermfg=darkgrey ctermbg=black

" Set background color of folded blocks
highlight Folded ctermbg=black

" Some syntax highlighting changes (maybe move this to its own file)
highlight Function ctermfg=darkblue
highlight String ctermfg=darkgreen
highlight Comment ctermfg=darkgrey
highlight Exception ctermfg=darkred

" Fix colors on gitgutter after colorscheme has been set
highlight SignColumn ctermbg=None
highlight GitGutterAdd ctermbg=None ctermfg=green
highlight GitGutterChange ctermbg=None ctermfg=yellow
highlight GitGutterDelete ctermbg=None ctermfg=red

" Change colors to be more intuitive for vimwiki
highlight VimwikiHeader1 ctermbg=None ctermfg=darkred
highlight VimwikiHeader2 ctermbg=None ctermfg=darkblue
highlight VimwikiHeader3 ctermbg=None ctermfg=darkgreen
highlight VimwikiHeader4 ctermbg=None ctermfg=yellow
highlight VimwikiHeader5 ctermbg=None ctermfg=cyan
highlight VimwikiHeader6 ctermbg=None ctermfg=magenta

highlight Conceal ctermbg=None ctermfg=darkblue
#+end_src

*** Custom Keybindings

#+begin_src conf
" Sets a keybind to turn off highlighted searches
nnoremap <leader><space> :nohlsearch<CR>

" Keybinds to quickly switch buffers
noremap <S-j> :bn<CR>
noremap <S-k> :bp<CR>

" Custom git mappings (is fugitive or gitgutter better to use instead?)
noremap <F2> :Git <CR>
noremap <F3> :Git diff<CR>
noremap <F4> :Gclog<CR>

" Key binds to toggle the Undo Tree
noremap <F5> :UndotreeToggle<CR>

noremap <F6> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") .
    \ '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
    \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">" .
    \ " FG:" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"fg#")<CR>

" Ledger remap tab completion
au FileType ledger inoremap <silent> <Tab>
            \ <C-r>=ledger#autocomplete_and_align()<CR>
au FileType ledger vnoremap <silent> <Tab>
            \ :LedgerAlign<CR>
au FileType ledger nnoremap <silent> <C-m>
            \ :silent<space>make<bar>redraw!<bar>cwindow<CR>
au FileType ledger nnoremap <silent> <C-s>
            \ :call ledger#transaction_state_toggle(line('.'), ' !*?')<CR>

" Vimwiki doc pubs open
autocmd FileType vimwiki nnoremap <Leader>p :silent !pubs doc open %:r<CR>
#+end_src

*** Custom Vim Functions
**** Trim Whitespace
#+begin_src conf
" Trim the whitespace present in a file
fun! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun
command! TrimWhitespace call TrimWhitespace()
#+end_src

**** Toggle Calendar

#+begin_src conf
" Toggle calendar view within view if in vim wiki
function! ToggleCalendar()
    execute ":Calendar"
    if exists("g:calendar_open")
        if g:calendar_open == 1
            execute "q"
            unlet g:calendar_open
        else
            g:calendar_open = 1
        end
    else
        let g:calendar_open = 1
    end
endfunction
:autocmd FileType vimwiki map <leader>c :call ToggleCalendar()<CR>
#+end_src

*** Vim mode line

#+begin_src conf
" vim:ft=vim
#+end_src

** Tmux
:PROPERTIES:
:header-args:conf: :tangle ~/.tmux.conf
:END:
*** Basic Config

#+begin_src conf
set -g default-terminal "screen-256color"   # Use 256 colors
set -g history-limit 100000                 # Scrollback buffer number of lines

# Start window indexing at one instead of zero
set -g base-index 1
#+end_src

*** Keybindings

#+begin_src conf
# Set the prefix key and some key bindings to match GNU Screen
set -g prefix C-b
#bind-key C-a last-window

# Key bindings for horizontal and vertical panes
unbind %
unbind '"'
bind | split-window -h
bind - split-window -v

# Add vim-like bindings
unbind-key j
bind-key j select-pane -D
unbind-key k
bind-key k select-pane -U
unbind-key h
bind-key h select-pane -L
unbind-key l
bind-key l select-pane -R
#+end_src

*** Window Settings

#+begin_src conf
# Enable window titles
set -g set-titles on

# Window title string (uses statusbar variables)
set -g set-titles-string '#T'
#+end_src

*** Status Bar

#+begin_src conf
# Status bar with load and time
set -g status-bg '#4e4e4e'
set -g status-fg '#ffffff'
set -g status-left ' '
set -g status-right '#[bg=#bbbbbb]#[fg=#000000]#(cut -d " " -f -3 /proc/loadavg) #[bg=#4e4e4e]#[fg=#ffffff]#(date +" %H:%M ")'
set -g window-status-format '#I #W'
set -g window-status-current-format ' #I #W '
setw -g window-status-current-bg '#55ff55'
setw -g window-status-current-fg '#000000'
#+end_src

*** Pane

#+begin_src conf
# Pane border colors
set -g pane-active-border-fg '#bbbbbb'
set -g pane-border-fg '#555555'
#+end_src

*** Reload Config

#+begin_src conf
# Bind to reload config
bind r source-file ~/.tmux.conf
#+end_src

* Desktop Environment
** Xorg X11 Window System
:PROPERTIES:
:header-args:C: :tangle ~/.Xresources
:END:
*** Source Colorscheme

#+begin_src C
#include ".config/xcolor/scheme"
#+end_src

*** Xft Font Settings

#+begin_src C
Xft.dpi:                    96
Xft.antialias:              true
Xft.rgba:                   rgb
Xft.hinting:                true
Xft.hintstyle:              hintslight
#+end_src

*** Default Font Face

#+begin_src C
!*font: xft:Iosevka Term:size=11
!*font: xft:xos4 Terminus:size=12
#define system_font xft:xos4 Terminus:size=12
#+end_src

*** Rxvt Unicode Terminal
**** General Settings

#+begin_src C
URxvt.depth:                32
URxvt.geometry:             96x33
URxvt.loginShell:           false
URxvt.internalBorder:       10
URxvt.lineSpace:            0
!URxvt.termName:             xterm-256color
#+end_src

**** Transparency

I've disabled all transparency for the time being

#+begin_src C
! fake transparency - true or false (default)
!URxvt*transparent: true

! Real transparency (needs compositor like compton)
! If using make sure to disable the background below.
!URxvt*depth: 32
!URxvt*background: [85]xbackground
#+end_src

**** Misc UI Changes

#+begin_src C
! tint with any color; i.e., blue, red, tomato4, olivedrab2, etc.
!   some nice listings are at:
!     http://www.nisrv.com/drupal/?q=node/11
!     http://www.htmlgoodies.com/tutorials/colors/article.php/3478921
!URxvt*tintColor: S_base03

! shading - 0 to 99 darkens, 101 to 200 lightens.
!   Dont use with tintColor; just use a darker or lighter color instead.
URxvt*shading: 15

URxvt*saveLines: 12000

! scrollbar - true (default) or false
URxvt*scrollBar: false

! scrollbar position - left=false (default) or right=true
URxvt*scrollBar_right: false

! scrollbar style - rxvt (default), plain, next, or xterm
URxvt*scrollstyle: plain
#+end_src

**** Clipboard Keybindings

#+begin_src C
! Remap the copy and paste functionaility
URxvt.keysym.Shift-Control-V: eval:paste_clipboard
URxvt.keysym.Shift-Control-C: eval:selection_to_clipboard
#+end_src

**** Colorscheme and Font

#+begin_src C
URxvt.foreground: xforeground
URxvt.background: xbackground
URxvt.cursorColor: xcursorColor

! This is for fading windows if not active
URxvt.fading: xfade
URxvt.fadeColor: xbackground

URxvt.color0:  xcolor0
URxvt.color1:  xcolor1
URxvt.color2:  xcolor2
URxvt.color3:  xcolor3
URxvt.color4:  xcolor4
URxvt.color5:  xcolor5
URxvt.color6:  xcolor6
URxvt.color7:  xcolor7
URxvt.color8:  xcolor8
URxvt.color9:  xcolor9
URxvt.color10: xcolor10
URxvt.color11: xcolor11
URxvt.color12: xcolor12
URxvt.color13: xcolor13
URxvt.color14: xcolor14
URxvt.color15: xcolor15

URxvt.font: system_font
#+end_src

*** Rofi Dmenu
**** Enabled Modes

#+begin_src C
! "Enabled modi" Set from: Default
rofi.modi:                           window,run,ssh
#+end_src

**** Window Geometry

#+begin_src C
! "Window width" Set from: Default
 rofi.width:                          30

! "Number of lines" Set from: Default
 rofi.lines:                          15

! "Number of columns" Set from: Default
! rofi.columns:                        1
#+end_src

**** Colorscheme and Font

#+begin_src C
! "Font to use" Set from: XResources
rofi.font:                            Iosevka Term 12

! Color Guidlines                       BG -  FG - BG_ALT - HL_BG - HL_FG
! "Color scheme for normal row"
 rofi.color-normal:                     xbackground, xforeground, xbackground, xcolor0, xforeground
! "Color scheme for urgent row"
 rofi.color-urgent:                     xbackground, xforeground, xbackground, xcolor0, xforeground
! "Color scheme for active row"
 rofi.color-active:                     xbackground, xforeground, xbackground, xcolor0, xforeground

! Color Guidlines                       BG          BORDER      SEPEARATOR
! "Color scheme window"
 rofi.color-window:                     xbackground,    xcolor8,    xcolor8
! "Border width" Set from: XResources
rofi.bw:                             4
#+end_src

**** Unused Rofi Settings

#+begin_src C
! "Location on screen" Set from: Default
! rofi.location:                       0
! "Padding" Set from: Default
! rofi.padding:                        5
! "Y-offset relative to location" Set from: Default
! rofi.yoffset:                        0
! "X-offset relative to location" Set from: Default
! rofi.xoffset:                        0
! "Always show number of lines" Set from: Default
! rofi.fixed-num-lines:                true

! "Terminal to use" Set from: XResources
rofi.terminal:                       urxvtc
! "Ssh client to use" Set from: Default
! rofi.ssh-client:                     ssh
! "Ssh command to execute" Set from: Default
! rofi.ssh-command:                    {terminal} -e {ssh-client} {host}
! "Run command to execute" Set from: Default
! rofi.run-command:                    {cmd}
! "Command to get extra run targets" Set from: Default
! rofi.run-list-command:
! "Run command to execute that runs in shell" Set from: Default
! rofi.run-shell-command:              {terminal} -e {cmd}
! "Command executed on accep-entry-custom for window modus" Set from: Default
! rofi.window-command:                 xkill -id {window}

! "Disable history in run/ssh" Set from: Default
! rofi.disable-history:                false
! "Use levenshtein sorting" Set from: Default
! rofi.levenshtein-sort:               false
! "Set case-sensitivity" Set from: Default
! rofi.case-sensitive:                 false

! "Cycle through the results list" Set from: Default
! rofi.cycle:                          true
! "Enable sidebar-mode" Set from: Default
! rofi.sidebar-mode:                   false
! "Row height (in chars)" Set from: Default
! rofi.eh:                             1
! "Enable auto select mode" Set from: Default
! rofi.auto-select:                    false

! "Parse hosts file for ssh mode" Set from: Default
! rofi.parse-hosts:                    false
! "Parse known_hosts file for ssh mode" Set from: Default
! rofi.parse-known-hosts:              true

! "Set the modi to combine in combi mode" Set from: Default
! rofi.combi-modi:                     window,run
! "Set the matching algorithm. (normal, regex, glob, fuzzy)" Set from: Default
! rofi.matching:                       normal
! "Tokenize input string" Set from: Default
! rofi.tokenize:                       true
! "Monitor id to show on" Set from: Default
! rofi.m:                              -5

! "Margin between rows" Set from: Default
! rofi.line-margin:                    2
! "Padding within rows" Set from: Default
! rofi.line-padding:                   1
! "Pre-set filter" Set from: Default
! rofi.filter:
! "Separator style (none, dash, solid)" Set from: Default
! rofi.separator-style:                dash
! "Hide scroll-bar" Set from: Default
! rofi.hide-scrollbar:                 false
! "Fullscreen" Set from: Default
! rofi.fullscreen:                     false
! "Fake transparency" Set from: Default
! rofi.fake-transparency:              false
! "DPI" Set from: Default
! rofi.dpi:                            -1

! "Threads to use for string matching" Set from: Default
! rofi.threads:                        0

! "Scrollbar width" Set from: Default
! rofi.scrollbar-width:                8
! "Scrolling method. (0: Page, 1: Centered)" Set from: Default
! rofi.scroll-method:                  0

! "Background to use for fake transparency. (background or screenshot)" Set from: Default
! rofi.fake-background:                screenshot
! "Window Format. w (desktop name), t (title), n (name), r (role), c (class)" Set from: Default
! rofi.window-format:                  {w}   {c}   {t}
! "Click outside the window to exit" Set from: Default
! rofi.click-to-exit:                  true

! "Indicate how it match by underlining it." Set from: Default
! rofi.show-match:                     true
! "Pidfile location" Set from: Default
! rofi.pid:                            /home/zamlz/.cache/rofi.pid

! "Paste primary selection" Set from: Default
! rofi.kb-primary-paste:               Control+V,Shift+Insert
! "Paste clipboard" Set from: Default
! rofi.kb-secondary-paste:             Control+v,Insert
! "Clear input line" Set from: Default
! rofi.kb-clear-line:                  Control+w
! "Beginning of line" Set from: Default
! rofi.kb-move-front:                  Control+a
! "End of line" Set from: Default
! rofi.kb-move-end:                    Control+e
! "Move back one word" Set from: Default
! rofi.kb-move-word-back:              Alt+b
! "Move forward one word" Set from: Default
! rofi.kb-move-word-forward:           Alt+f
! "Move back one char" Set from: Default
! rofi.kb-move-char-back:              Left,Control+b
! "Move forward one char" Set from: Default
! rofi.kb-move-char-forward:           Right,Control+f
! "Delete previous word" Set from: Default
! rofi.kb-remove-word-back:            Control+Alt+h,Control+BackSpace
! "Delete next word" Set from: Default
! rofi.kb-remove-word-forward:         Control+Alt+d
! "Delete next char" Set from: Default
! rofi.kb-remove-char-forward:         Delete,Control+d
! "Delete previous char" Set from: Default
! rofi.kb-remove-char-back:            BackSpace,Control+h
! "Delete till the end of line" Set from: Default
! rofi.kb-remove-to-eol:               Control+k
! "Delete till the start of line" Set from: Default
! rofi.kb-remove-to-sol:               Control+u
! "Accept entry" Set from: Default
! rofi.kb-accept-entry:                Control+j,Control+m,Return,KP_Enter
! "Use entered text as command (in ssh/run modi)" Set from: Default
! rofi.kb-accept-custom:               Control+Return
! "Use alternate accept command." Set from: Default
! rofi.kb-accept-alt:                  Shift+Return
! "Delete entry from history" Set from: Default
! rofi.kb-delete-entry:                Shift+Delete
! "Switch to the next mode." Set from: Default
! rofi.kb-mode-next:                   Shift+Right,Control+Tab
! "Switch to the previous mode." Set from: Default
! rofi.kb-mode-previous:               Shift+Left,Control+Shift+Tab
! "Go to the previous column" Set from: Default
! rofi.kb-row-left:                    Control+Page_Up
! "Go to the next column" Set from: Default
! rofi.kb-row-right:                   Control+Page_Down
! "Select previous entry" Set from: Default
! rofi.kb-row-up:                      Up,Control+p,Shift+Tab,Shift+ISO_Left_Tab
! "Select next entry" Set from: Default
! rofi.kb-row-down:                    Down,Control+n
! "Go to next row, if one left, accept it, if no left next mode." Set from: Default
! rofi.kb-row-tab:                     Tab
! "Go to the previous page" Set from: Default
! rofi.kb-page-prev:                   Page_Up
! "Go to the next page" Set from: Default
! rofi.kb-page-next:                   Page_Down
! "Go to the first entry" Set from: Default
! rofi.kb-row-first:                   Home,KP_Home
! "Go to the last entry" Set from: Default
! rofi.kb-row-last:                    End,KP_End
! "Set selected item as input text" Set from: Default
! rofi.kb-row-select:                  Control+space
! "Take a screenshot of the rofi window" Set from: Default
! rofi.kb-screenshot:                  Alt+S
! "Toggle case sensitivity" Set from: Default
! rofi.kb-toggle-case-sensitivity:     grave,dead_grave
! "Toggle sort" Set from: Default
! rofi.kb-toggle-sort:                 Alt+grave
! "Quit rofi" Set from: Default
! rofi.kb-cancel:                      Escape,Control+g,Control+bracketleft
! "Custom keybinding 1" Set from: Default
! rofi.kb-custom-1:                    Alt+1
! "Custom keybinding 2" Set from: Default
! rofi.kb-custom-2:                    Alt+2
! "Custom keybinding 3" Set from: Default
! rofi.kb-custom-3:                    Alt+3
! "Custom keybinding 4" Set from: Default
! rofi.kb-custom-4:                    Alt+4
! "Custom Keybinding 5" Set from: Default
! rofi.kb-custom-5:                    Alt+5
! "Custom keybinding 6" Set from: Default
! rofi.kb-custom-6:                    Alt+6
! "Custom Keybinding 7" Set from: Default
! rofi.kb-custom-7:                    Alt+7
! "Custom keybinding 8" Set from: Default
! rofi.kb-custom-8:                    Alt+8
! "Custom keybinding 9" Set from: Default
! rofi.kb-custom-9:                    Alt+9
! "Custom keybinding 10" Set from: Default
! rofi.kb-custom-10:                   Alt+0
! "Custom keybinding 11" Set from: Default
! rofi.kb-custom-11:                   Alt+exclam
! "Custom keybinding 12" Set from: Default
! rofi.kb-custom-12:                   Alt+at
! "Csutom keybinding 13" Set from: Default
! rofi.kb-custom-13:                   Alt+numbersign
! "Custom keybinding 14" Set from: Default
! rofi.kb-custom-14:                   Alt+dollar
! "Custom keybinding 15" Set from: Default
! rofi.kb-custom-15:                   Alt+percent
! "Custom keybinding 16" Set from: Default
! rofi.kb-custom-16:                   Alt+dead_circumflex
! "Custom keybinding 17" Set from: Default
! rofi.kb-custom-17:                   Alt+ampersand
! "Custom keybinding 18" Set from: Default
! rofi.kb-custom-18:                   Alt+asterisk
! "Custom Keybinding 19" Set from: Default
! rofi.kb-custom-19:                   Alt+parenleft

! "The display name of this browser" Set from: Default
! rofi.display-ssh:
! "The display name of this browser" Set from: Default
! rofi.display-run:
! "The display name of this browser" Set from: Default
! rofi.display-drun:
! "The display name of this browser" Set from: Default
! rofi.display-combi:
#+end_src

*** Emacs

Really we set the default colorscheme here so that emacs doesn't blind our eyes we the default black background, but also set some other sane defaults from the default colorscheme so that if emacs does in fact crash, we are in a /dark theme/ environment.

#+begin_src C
Emacs.foreground: xforeground
Emacs.background: xbackground

Emacs.color0:  xcolor0
Emacs.color1:  xcolor1
Emacs.color2:  xcolor2
Emacs.color3:  xcolor3
Emacs.color4:  xcolor4
Emacs.color5:  xcolor5
Emacs.color6:  xcolor6
Emacs.color7:  xcolor7
Emacs.color8:  xcolor8
Emacs.color9:  xcolor9
Emacs.color10: xcolor10
Emacs.color11: xcolor11
Emacs.color12: xcolor12
Emacs.color13: xcolor13
Emacs.color14: xcolor14
Emacs.color15: xcolor15
#+end_src

** Sxhkd - Simple X Hotkey Daemon
:PROPERTIES:
:header-args:shell: :tangle ~/.config/sxhkd/sxhkdrc :mkdirp yes
:END:
*** Terminal Exec Keybindings

This value is specified in =$HOME/etc/xorg/wminit=

#+begin_src shell
# Spawn a normal terminal
super + Return
    $SXHKD_TERMINAL

#+end_src

This actually only works in normal terminals and and not in the emacs vterm. Need to think of another solution to handle that.

#+begin_src shell
# Spawn Terminal matching environment of focused terminal
super + shift + Return
    $HOME/etc/sxhkd/pwdcfw/$SXHKD_TERMINAL
#+end_src

*** Rofi Dmenu Launcher Keybindings

#+begin_src shell
# Standard $PATH program launcher
super + e
    rofi -show run
#+end_src

#+begin_src shell
# Dmenu for password store
super + p
    $HOME/lib/rofi/rofi-pass
super + shift + p
    $HOME/lib/rofi/rofi-pass --qrcode
#+end_src

#+begin_src shell
# Copy a specific bookmark to the clipboard
super + b
    $HOME/lib/rofi/rofi-book
#+end_src

#+begin_src shell
# Open up a wiki page in read-only mode (originally named notes)
super + n
    $HOME/lib/rofi/rofi-wiki
super + shift + n
    $HOME/lib/rofi/rofi-wiki --pdf
#+end_src

#+begin_src shell
# Restore a saved browser session
super + w
    $HOME/lib/rofi/rofi-browser
#+end_src

#+begin_src shell
# Toggle a display/power profile
super + d
    $HOME/lib/rofi/rofi-profile
XF86Display
    $HOME/lib/rofi/rofi-profile
#+end_src

#+begin_src shell
# Control system state (locked, reboot, poweroff, etc.)
super + Escape
    $HOME/lib/rofi/rofi-system LOCK SCREEN
super + ctrl + alt + Escape
    $HOME/lib/rofi/rofi-system
#+end_src

*** Scrot Keybindings

It's important that these keybindings are prefaces with the =@= token as it implies that the command should be executed on key release as opposed to key press. Scrot and xclip here will not work properly unless they are on key release.

#+begin_src shell
# Interactively select a window or rectangle with the mouse
@Print
    scrot -q 100 -s '/tmp/%F_%T_$wx$h.png' -e 'xclip -selection clipboard -target image/png -i $f'

@shift + Print
    scrot -q 100 '/tmp/%F_%T_$wx$h.png' -e 'xclip -selection clipboard -target image/png -i $f'
#+end_src

*** Media Control Keybindings

#+begin_src shell
XF86MonBrightnessUp
    xbacklight -inc 1 -time 10; \
    $HOME/etc/lemonbar/utils/trigger_fifos bkl

XF86MonBrightnessDown
    xbacklight -dec 1 -time 10; \
    $HOME/etc/lemonbar/utils/trigger_fifos bkl

XF86AudioMute
    pulsemixer --toggle-mute; \
    $HOME/etc/lemonbar/utils/trigger_fifos vol

XF86AudioMicMute
    pulsemixer --toggle-mute; \
    $HOME/etc/lemonbar/utils/trigger_fifos vol

XF86AudioRaiseVolume
    pulsemixer --change-volume +1; \
    $HOME/etc/lemonbar/utils/trigger_fifos vol

XF86AudioLowerVolume
    pulsemixer --change-volume -1; \
    $HOME/etc/lemonbar/utils/trigger_fifos vol

XF86AudioPlay
    $HOME/src/spotify-cli/spotify-cli toggle

XF86AudioNext
    $HOME/src/spotify-cli/spotify-cli next

XF86AudioPrev
    $HOME/src/spotify-cli/spotify-cli prev
#+end_src

** Herbstluftwm Manual Tiling Window Manager
:PROPERTIES:
:header-args:shell: :tangle ~/.config/herbstluftwm/autostart :mkdirp yes :shebang #!/bin/sh
:END:
*** Initial Configuration

Pretty straightforward stuff, setup logger, create a helper function,

#+begin_src shell
. $HOME/lib/shell/logger
LOGGER=$(get_logger herbstluftwm)
$LOGGER "Initializing herbstluftwm window manager"

hc() {
    herbstclient "$@"
}

hc emit_hook reload
#+end_src

*** WM Custom Rules

Remove any prexisting rules

#+begin_src shell
hc unrule --all
#+end_src

Setup simple focus rules

#+begin_src shell
hc rule focus=on # normally focus new clients
#hc rule focus=off # normally do not focus new clients
#hc rule class=XTerm tag=3 # move all xterms to tag 3
#+end_src

Okay so probably the rules for the terminal are pointless here. Discord one actually doesn't work the way I want it to, but everything else here is pretty important. It makes sure that panels appear where they are suppose to and also ensures that popups are floating.

#+begin_src shell
# give focus to most common terminals
hc rule class~'(.*[Rr]xvt.*|.*[Tt]erm|Konsole)' focus=on
hc rule class~'(Discord|DiscordCanary)' focus=off
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' pseudotile=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off
#+end_src

*** Source Xorg Universal Settings

We need to configure some X11 specific things that are universally needed regardless of window manager.

#+begin_src shell
# Reapply certain XORG settings (do not fork this)
$HOME/etc/xorg/wminit
#+end_src

*** Keybindings

/You can use =xev= to identify X11 keys very easily./

**** Setup

#+begin_src shell
# remove all existing keybinding; Use the super key as the main modifier
hc keyunbind --all
Super=Mod4
#+end_src

**** Reload WM and Close Window

#+begin_src shell
hc keybind $Super-Ctrl-Alt-r reload
hc keybind $Super-q close
#+end_src

**** Window Focus

#+begin_src shell
# focusing clients
hc keybind $Super-Left  focus left
hc keybind $Super-Down  focus down
hc keybind $Super-Up    focus up
hc keybind $Super-Right focus right
hc keybind $Super-h     focus left
hc keybind $Super-j     focus down
hc keybind $Super-k     focus up
hc keybind $Super-l     focus right

# Cycling focus
hc keybind $Super-BackSpace   cycle_monitor
hc keybind $Super-Tab         cycle +1
hc keybind $Super-Shift-Tab   cycle_frame +1
hc keybind $Super-c           cycle_all +1
hc keybind $Super-i jumpto urgent
#+end_src

**** Window Movement

#+begin_src shell
# moving clients
hc keybind $Super-Shift-Left  shift left
hc keybind $Super-Shift-Down  shift down
hc keybind $Super-Shift-Up    shift up
hc keybind $Super-Shift-Right shift right
hc keybind $Super-Shift-h     shift left
hc keybind $Super-Shift-j     shift down
hc keybind $Super-Shift-k     shift up
hc keybind $Super-Shift-l     shift right
#+end_src

**** Splitting Frames

#+begin_src shell
# splitting frames
# create an empty frame at the specified direction
hc keybind $Super-u       split   bottom  0.5
hc keybind $Super-o       split   right   0.5

# let the current frame explode into subframes
hc keybind $Super-Control-space split explode
#+end_src

**** Resizing Frames

#+begin_src shell
# resizing frames
resizestep=0.01

hc keybind $Super-Control-h       resize left +$resizestep
hc keybind $Super-Control-j       resize down +$resizestep
hc keybind $Super-Control-k       resize up +$resizestep
hc keybind $Super-Control-l       resize right +$resizestep
hc keybind $Super-Control-Left    resize left +$resizestep
hc keybind $Super-Control-Down    resize down +$resizestep
hc keybind $Super-Control-Up      resize up +$resizestep
hc keybind $Super-Control-Right   resize right +$resizestep
#+end_src

**** Workspace Definitions (tags)

#+begin_src shell
# tags
tag_names=([1] [2] [3] [4] [5] [6] [7] [8] [9] [0])
tag_keys=( {1..9} 0 )

hc rename default "${tag_names[0]}" || true
for i in ${!tag_names[@]} ; do
    hc add "${tag_names[$i]}"
    key="${tag_keys[$i]}"
    if ! [ -z "$key" ] ; then
        hc keybind "$Super-$key" use_index "$i"
        hc keybind "$Super-Shift-$key" move_index "$i"
    fi
done
#+end_src

**** Workspace Movement

#+begin_src shell
# Jump to previous tag
hc keybind $Super-grave use_previous

# cycle through tags
hc keybind $Super-bracketright use_index +1 --skip-visible
hc keybind $Super-bracketleft  use_index -1 --skip-visible
#+end_src

**** Layout Control

#+begin_src shell
# layouting
hc keybind $Super-r remove
hc keybind $Super-s floating toggle
hc keybind $Super-f fullscreen toggle
hc keybind $Super-t pseudotile toggle

# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind $Super-space                                                       \
            or , and . compare tags.focus.curframe_wcount = 2                 \
                     . cycle_layout +1 vertical horizontal max vertical grid  \
               , cycle_layout +1
#+end_src

**** Mouse Control

#+begin_src shell
# mouse
hc mouseunbind --all
hc mousebind $Super-Button1 move
hc mousebind $Super-Button2 zoom
hc mousebind $Super-Button3 resize
#+end_src

**** Colorscheme Cylcing

#+begin_src shell
# cycle through colorschemes
hc keybind $Super-Ctrl-Alt-bracketright chain , \
        spawn $HOME/bin/xcolorscheme --next , reload

hc keybind $Super-Ctrl-Alt-bracketleft chain , \
        spawn $HOME/bin/xcolorscheme --prev , reload
#+end_src

*** Theme Configuration
**** Source Colorscheme

#+begin_src shell
. $HOME/lib/shell/xrdb_colors
#+end_src

**** TODO What does this do again?

#+begin_src shell
hc attr theme.tiling.reset 1
hc attr theme.floating.reset 1
#+end_src

**** Frame Appearance

#+begin_src shell
hc set frame_transparent_width 1
hc set frame_border_width 1
hc set frame_border_active_color $XBACKGROUND
hc set frame_border_normal_color $XBACKGROUND

hc set frame_bg_transparent 1
hc set frame_bg_normal_color $XBACKGROUND
hc set frame_bg_active_color $XCOLOR8

hc set always_show_frame 0
hc set frame_gap 8
hc set frame_padding 0
#+end_src

**** Window Appearance

#+begin_src shell
hc attr theme.active.outer_color $XBACKGROUND
hc attr theme.active.inner_color $XBACKGROUND

hc attr theme.normal.color $BLACK
hc attr theme.active.color $WHITE
hc attr theme.urgent.color orange

hc attr theme.border_width 9
hc attr theme.inner_width 3
hc attr theme.outer_width 4

hc attr theme.inner_color $XBACKGROUND
hc attr theme.outer_color $XBACKGROUND

hc attr theme.floating.border_width 9
hc attr theme.floating.inner_width 3
hc attr theme.floating.outer_width 4

hc attr theme.floating.outer_color $XBACKGROUND
hc attr theme.background_color '#141414'

hc set window_gap 0
hc set smart_window_surroundings 0
hc set smart_frame_surroundings 1
hc set mouse_recenter_gap 0
#+end_src

**** Tree View

#+begin_src shell
hc set tree_style '╾│ ├└╼─┐'
#+end_src

**** Montior Setup

Well monitor setup doesn't belong here really, but we're doing it here because we need to make space for the panels.

#+begin_src shell
# unlock, just to be sure
hc unlock
hc detect_monitors
#+end_src

**** Configure Panel Height

#+begin_src shell
PANEL_HEIGHT=20
for monitor in $(seq 0 2); do
    hc pad $monitor $PANEL_HEIGHT 0 $PANEL_HEIGHT 0
done
#+end_src

*** Event Hooks

This starts a couple FIFO hooks so that lemonbar can update the information on it's panel as effeciently as possible.

**** Event Hooks Startup Verification

#+begin_src shell
if [ $(pgrep -cx herbstclient) -gt 0 ]; then
    printf "The herbstluftwm event hooks for lemonbar are already running.\n" >&2
    $LOGGER "The herbstluftwm event hooks for lemonbar are already running."
    exit 1
fi
#+end_src

**** Event Hooks Trigger Definition

#+begin_src shell
WSP_TRIGGER="$HOME/etc/lemonbar/utils/trigger_fifos wsp"
WIN_TRIGGER="$HOME/etc/lemonbar/utils/trigger_fifos win"
WARG="'(focus_changed|window_title|panel_init)'"
#+end_src

**** Initialize Event Hooks

I don't remember why I commented one of the hooks out, oh thats rights, its because I'm not using the lemonbar xwindow module I made anymore.

#+begin_src shell
(herbstclient --idle       | while read -r line; do $WSP_TRIGGER; done) &
#(herbstclient --idle $WARG | while read -r line; do $WIN_TRIGGER; done) &

$LOGGER "All hook have been started"
#+end_src

** Lemonbar Panel
*** Panel Launcher
:PROPERTIES:
:header-args:shell: :tangle ~/.config/lemonbar/lemonbar :mkdirp yes :shebang #!/bin/sh
:END:

Load config and logger.

#+begin_src shell
. $HOME/.config/lemonbar/config.default
LOGGER=$(get_logger lemonbar)
#+end_src

Prevent multiple panels from starting up (really bad).

#+begin_src shell
if [ $(pgrep -cx lemonbar) -gt 1 ]; then
    $LOGGER -s "The panel is already running"
    exit 1
fi
$LOGGER "Starting lemonbar init script"
#+end_src

Using =trap=, we can change the behaviour of our shell script.

#+begin_src shell
trap 'trap - TERM; kill 0' INT TERM QUIT EXIT
#+end_src

Now it's time to make each of the panel FIFOs and start the modules.

#+begin_src shell
# Prepare the FIFOS
$HOME/etc/lemonbar/utils/make_fifos

# Tail command to ensure that fifos never close
TAIL="tail --lines=+1 --follow"

# Add modules to the top fifo
$LOGGER "Setting up top fifo modules"
$HOME/etc/lemonbar/modules/date         > $PANEL_TOP_FIFO &
$HOME/etc/lemonbar/modules/network      > $PANEL_TOP_FIFO &
$HOME/etc/lemonbar/modules/time         > $PANEL_TOP_FIFO &
$HOME/etc/lemonbar/modules/whoami       > $PANEL_TOP_FIFO &
$HOME/etc/lemonbar/modules/battery      > $PANEL_TOP_FIFO &
$TAIL $EVENT_BKL_FIFO \
    | $HOME/etc/lemonbar/modules/backlight > $PANEL_TOP_FIFO &

# Add modules to the bot fifo
$LOGGER "Setting up bot fifo modules"
$HOME/etc/lemonbar/modules/cpu          > $PANEL_BOT_FIFO &
$HOME/etc/lemonbar/modules/filesystems  > $PANEL_BOT_FIFO &
$HOME/etc/lemonbar/modules/memory       > $PANEL_BOT_FIFO &
$HOME/etc/lemonbar/modules/spotify      > $PANEL_BOT_FIFO &
$HOME/etc/lemonbar/modules/volume/const > $PANEL_BOT_FIFO &
# $HOME/etc/lemonbar/modules/windowinfo   < $EVENT_WIN_FIFO > $PANEL_BOT_FIFO &
$TAIL $EVENT_WSP_FIFO \
    | $HOME/etc/lemonbar/modules/workspaces   > $PANEL_BOT_FIFO &
$TAIL $EVENT_VOL_FIFO \
    | $HOME/etc/lemonbar/modules/volume/event > $PANEL_BOT_FIFO &
#+end_src

Setup the argument string to pass send to lemonbar. Uncomment fonts as needed.

#+begin_src shell
# Define lemonbar opts
#-f dina:size=12
#-f xos4Terminus:style=Bold:size=12
#-f IosevkaTerm:size=12
#-f PowerlineSymbols:style=Medium:size=12
#-f -wuncon-siji-medium-r-normal--10-100-75-75-c-80-iso10646-1
OPTS="-g x20
-F ${XBACKGROUND}
-B ${XBACKGROUND}
-f IosevkaTerm:size=12
-f FontAwesome5Free:style=Regular:size=14
-f FontAwesome5Free:style=Solid:size=14
-f FontAwesome5Brands:style=Regular:size=14
-u 3"

$LOGGER "Lemonbar defined with the following opts : $OPTS"
#+end_src

Actually launch our panel loops (while reading from the fifos) and pipe them into lemonbar. We should also pipe the output from lemonbar to a shell process in-case there are modules that want to run specific commands.

#+begin_src shell
# Start the top panel
$LOGGER "Initializing lemonbar using top fifo"
$HOME/etc/lemonbar/utils/loop TOP < $PANEL_TOP_FIFO | lemonbar $OPTS | sh &

# Start the bottom panel
$LOGGER "Initializing lemonbar using bot fifo"
$HOME/etc/lemonbar/utils/loop BOT < $PANEL_BOT_FIFO | lemonbar $OPTS -b | sh &

$LOGGER "Lemonbar finished."
wait
#+end_src

*** Default Configuration
:PROPERTIES:
:header-args:shell: :tangle ~/.config/lemonbar/config.default :mkdirp yes
:END:

The default configuration is our source for all variables and functions that lemonbar and its modules will need to use. So we also source our utils files and other lib files here.

#+begin_src shell
# Import modules needed but anything that imports this config
. $HOME/lib/shell/logger
. $HOME/lib/shell/xrdb_colors
. $HOME/etc/lemonbar/utils/wrappers
. $HOME/etc/lemonbar/utils/multi_monitor_support
. $HOME/etc/lemonbar/utils/where_fifos

# Source local system config in case there are system specific changes
. $HOME/.config/lemonbar/config
#+end_src

Choose the icon wrapper.

#+begin_src shell
# Choose the output wrapper
MSG_WRAPPER=icon_wrapper
#+end_src

Anchors are an important concept with regards to FIFOs. They inform the main loop which module wrote which string.

#+begin_src shell
# Specify the Anchor Character for each module
ANCHOR_BACKLIGHT='L'
ANCHOR_BATTERY='B'
ANCHOR_CPU='C'
ANCHOR_DATE='D'
ANCHOR_FILESYSTEMS='F'
ANCHOR_MEMORY='M'
ANCHOR_NETWORK='N'
ANCHOR_SWAP='S'
ANCHOR_SPOTIFY='J'
ANCHOR_TIME='T'
ANCHOR_WHOAMI='U'
ANCHOR_WININFO='X'
ANCHOR_WORKSPACES='W'
ANCHOR_VOLUME='V'
#+end_src

Setup various refresh timings for various modules

#+begin_src shell
REFRESH_BATTERY=2
REFRESH_CPU=3
REFRESH_DATE=86400
REFRESH_FILESYSTEMS=10
REFRESH_MEMORY=3
REFRESH_NETWORK=2
REFRESH_SWAP=3
REFRESH_TIME=1
REFRESH_VOLUME=2
#+end_src

I played around with fonts in lemonbar, but honestly I'm not really a fan. If I want to enable it at any point, just need to set =LEMONBAR_ENABLE_ICONS= in the local config to be a non-empty string. But this aren't actually used *EVER* in the modules anymore as I'm using powerline icons now. I /should/ probably delete this and remove this segment of code.

#+begin_src shell
# Font Awesome icons for various modules
# https://fontawesome.com/icons?d=gallery&m=free
if [ -n "$LEMONBAR_ENABLE_ICONS" ]; then
    ICON_BACKLIGHT=$(env printf "\uf042 ")
    ICON_BATTERY_AC=$(env printf "\uf1e6 ")
    ICON_BATTERY_EMPTY=$(env printf "\uf244 ")
    ICON_BATTERY_NEAR_EMPTY=$(env printf "\uf243 ")
    ICON_BATTERY_HALF=$(env printf "\uf242 ")
    ICON_BATTERY_NEAR_FULL=$(env printf "\uf241 ")
    ICON_BATTERY_FULL=$(env printf "\uf240 ")
    ICON_BATTYER_CHARGING=$ICON_BATTERY_AC
    ICON_CPU=$(env printf "\uf24d ")
    ICON_DATE=$(env printf "\uf073 ")
    ICON_FILESYSTEMS=$(env printf "\uf0a0 ")
    ICON_MEMORY=$(env printf "\uf538 ")
    ICON_MUSIC=$(env printf "\uf001 ")
    ICON_NETWORK_ETHERNET=$(env printf "\uf796 ")
    ICON_NETWORK_OFFLINE=$(env printf "\uef6ff ")
    ICON_NETWORK_WIFI=$(env printf "\uf1eb ")
    ICON_SWAP=$(env printf "\uf1c0 ")
    ICON_TIME=$(env printf "\uf017 ")
    ICON_WHOAMI=$(env printf "\uf007 ")
    ICON_LINUX=$(env printf "\uf120 ")
    ICON_WORKSPACES=$(env printf "\uf108 ")
    ICON_VOLUME=$(env printf "\uf025 ")
else
    # Some icons are better left as blank so not all are defined
    ICON_BACKLIGHT="bL: "
    ICON_BATTERY_EMPTY="bat: "
    ICON_BATTERY_NEAR_EMPTY=$ICON_BATTERY_EMPTY
    ICON_BATTERY_HALF=$ICON_BATTERY_EMPTY
    ICON_BATTERY_NEAR_FULL=$ICON_BATTERY_EMPTY
    ICON_BATTERY_FULL=$ICON_BATTERY_EMPTY
    ICON_BATTERY_CHARGING="a/c: "
    ICON_CPU="cpu: "
    ICON_MEMORY="mem: "
    ICON_SWAP="swap: "
    ICON_VOLUME="vol: "
fi
#+end_src

There define the powerline icons (to use these, the module strings have to specially confiugred to use them).

#+begin_src shell
# Powerline Icons
PL_R=$(env printf "\ue0b0")
PL_Rb=$(env printf "\ue0b1")
PL_L=$(env printf "\ue0b2")
PL_Lb=$(env printf "\ue0b3")
#+end_src

Setup network interfaces and filesystem paths. These are dummy values and should be overriden with the locally generated config.

#+begin_src shell
# Hardware Specification (override this values in local config)
WIFI_INTERFACE=${WIFI_INTERFACE:-"wlan0"}
ETHERNET_INTERFACE=${ETHERNET_INTERFACE:-"eth0"}
FILESYSTEMS=${FILESYSTEMS:-"/dev/sda4"}
#+end_src

** Compton X11 Compositor
:PROPERTIES:
:header-args:conf: :tangle ~/.config/compton.conf :mkdirp yes
:END:
[[http://9m.no/ꪯ鵞][Thank you code_nomad!]] Copied a lot of this person's config...
*** Backend

Backend to use: "xrender" or "glx".
GLX backend is typically much faster but depends on a sane driver.

#+begin_src conf
# Provide the backend to use
backend = "xrender";
#+end_src

*** GLX backend

#+begin_src conf
# ??? Don't remember what this does...
glx-no-stencil = true;

# GLX backend: Copy unmodified regions from front buffer instead of redrawing them all.
# My tests with nvidia-drivers show a 10% decrease in performance when the whole screen is modified,
# but a 20% increase when only 1/4 is.
# My tests on nouveau show terrible slowdown.
# Useful with --glx-swap-method, as well.
glx-copy-from-front = false;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes, but is known to break things on some drivers (LLVMpipe).
# Recommended if it works.
# glx-no-rebind-pixmap = true;

# GLX backend: GLX buffer swap method we assume.
# Could be undefined (0), copy (1), exchange (2), 3-6, or buffer-age (-1).
# undefined is the slowest and the safest, and the default value.
# copy is fastest, but may fail on some drivers,
# 2-6 are gradually slower but safer (6 is still faster than 0).
# Usually, double buffer means 2, triple buffer means 3.
# buffer-age means auto-detect using GLX_EXT_buffer_age, supported by some drivers.
# Useless with --glx-use-copysubbuffermesa.
# Partially breaks --resize-damage.
# Defaults to undefined.
glx-swap-method = "undefined";
#+end_src

*** Shadows

#+begin_src conf
# Enabled client-side shadows on windows.
shadow = true;
# Don't draw shadows on DND windows.
no-dnd-shadow = true;
# Avoid drawing shadows on dock/panel windows.
no-dock-shadow = true;
# Zero the part of the shadow's mask behind the window. Fix some weirdness with ARGB windows.
clear-shadow = true;
# The blur radius for shadows. (default 12)
shadow-radius = 5;
# The left offset for shadows. (default -15)
shadow-offset-x = -5;
# The top offset for shadows. (default -15)
shadow-offset-y = -5;
# The translucency for shadows. (default .75)
shadow-opacity = 0.5;

# Set if you want different colour shadows
# shadow-red = 0.0;
# shadow-green = 0.0;
# shadow-blue = 0.0;

# The shadow exclude options are helpful if you have shadows enabled. Due to the way compton draws its shadows, certain applications will have visual glitches
# (most applications are fine, only apps that do weird things with xshapes or argb are affected).
# This list includes all the affected apps I found in my testing. The "! name~=''" part excludes shadows on any "Unknown" windows, this prevents a visual glitch with the XFWM alt tab switcher.
shadow-exclude = [
    "! name~=''",
    "name = 'Notification'",
    "name = 'Plank'",
    "name = 'Docky'",
    "name = 'Kupfer'",
    "name = 'xfce4-notifyd'",
    "name *= 'VLC'",
    "name *= 'compton'",
    "name *= 'Chromium'",
    "name *= 'Chrome'",
    "class_g = 'Conky'",
    "class_g = 'Kupfer'",
    "class_g = 'Synapse'",
    "class_g ?= 'Notify-osd'",
    "class_g ?= 'Cairo-dock'",
    "class_g ?= 'Xfce4-notifyd'",
    "class_g ?= 'Xfce4-power-manager'",
    "_GTK_FRAME_EXTENTS@:c"
];
# Avoid drawing shadow on all shaped windows (see also: --detect-rounded-corners)
shadow-ignore-shaped = false;
#+end_src

*** Opacity

#+begin_src conf
# Define opacity
menu-opacity = 1;
inactive-opacity = 1;
active-opacity = 1;
frame-opacity = 1;
inactive-opacity-override = false;
alpha-step = 0.06;

# Dim inactive windows. (0.0 - 1.0)
# inactive-dim = 0.2;
# Do not let dimness adjust based on window opacity.
# inactive-dim-fixed = true;
# Blur background of transparent windows. Bad performance with X Render backend. GLX backend is preferred.
# blur-background = true;
# Blur background of opaque windows with transparent frames as well.
# blur-background-frame = true;
# Do not let blur radius adjust based on window opacity.
blur-background-fixed = false;
blur-background-exclude = [
    "window_type = 'dock'",
    "window_type = 'desktop'"
];
#+end_src

*** Fading

#+begin_src conf
# Fade windows during opacity changes.
fading = true;
# The time between steps in a fade in milliseconds. (default 10).
fade-delta = 4;
# Opacity change between steps while fading in. (default 0.028).
fade-in-step = 0.03;
# Opacity change between steps while fading out. (default 0.03).
fade-out-step = 0.03;
# Fade windows in/out when opening/closing
# no-fading-openclose = true;

# Specify a list of conditions of windows that should not be faded.
fade-exclude = [ ];
#+end_src

*** Other

#+begin_src conf
# Try to detect WM windows and mark them as active.
mark-wmwin-focused = true;
# Mark all non-WM but override-redirect windows active (e.g. menus).
mark-ovredir-focused = true;
# Use EWMH _NET_WM_ACTIVE_WINDOW to determine which window is focused instead of using FocusIn/Out events.
# Usually more reliable but depends on a EWMH-compliant WM.
use-ewmh-active-win = true;
# Detect rounded corners and treat them as rectangular when --shadow-ignore-shaped is on.
detect-rounded-corners = true;

# Detect _NET_WM_OPACITY on client windows, useful for window managers not passing _NET_WM_OPACITY of client windows to frame windows.
# This prevents opacity being ignored for some apps.
# For example without this enabled my xfce4-notifyd is 100% opacity no matter what.
detect-client-opacity = true;

# Specify refresh rate of the screen.
# If not specified or 0, compton will try detecting this with X RandR extension.
refresh-rate = 0;

# Set VSync method. VSync methods currently available:
# none: No VSync
# drm: VSync with DRM_IOCTL_WAIT_VBLANK. May only work on some drivers.
# opengl: Try to VSync with SGI_video_sync OpenGL extension. Only work on some drivers.
# opengl-oml: Try to VSync with OML_sync_control OpenGL extension. Only work on some drivers.
# opengl-swc: Try to VSync with SGI_swap_control OpenGL extension. Only work on some drivers. Works only with GLX backend. Known to be most effective on many drivers. Does not actually control paint timing, only buffer swap is affected, so it doesn’t have the effect of --sw-opti unlike other methods. Experimental.
# opengl-mswc: Try to VSync with MESA_swap_control OpenGL extension. Basically the same as opengl-swc above, except the extension we use.
# (Note some VSync methods may not be enabled at compile time.)
vsync = "opengl-swc";

# Enable DBE painting mode, intended to use with VSync to (hopefully) eliminate tearing.
# Reported to have no effect, though.
dbe = false;
# Painting on X Composite overlay window. Recommended.
paint-on-overlay = true;

# Limit compton to repaint at most once every 1 / refresh_rate second to boost performance.
# This should not be used with --vsync drm/opengl/opengl-oml as they essentially does --sw-opti's job already,
# unless you wish to specify a lower refresh rate than the actual value.
sw-opti = true;

# Unredirect all windows if a full-screen opaque window is detected, to maximize performance for full-screen windows, like games.
# Known to cause flickering when redirecting/unredirecting windows.
# paint-on-overlay may make the flickering less obvious.
unredir-if-possible = true;

# Specify a list of conditions of windows that should always be considered focused.
focus-exclude = [ ];

# Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group focused at the same time.
detect-transient = true;
# Use WM_CLIENT_LEADER to group windows, and consider windows in the same group focused at the same time.
# WM_TRANSIENT_FOR has higher priority if --detect-transient is enabled, too.
detect-client-leader = true;
#+end_src

*** Window Type Settings

#+begin_src conf
wintypes:
{
    tooltip =
    {
        # fade: Fade the particular type of windows.
        fade = true;
        # shadow: Give those windows shadow
        shadow = false;
        # opacity: Default opacity for the type of windows.
        opacity = 0.85;
        # focus: Whether to always consider windows of this type focused.
        focus = true;
    };
};
#+end_src

** Zathura PDF Reader
:PROPERTIES:
:header-args:conf: :tangle ~/.config/zathura/zathurarc :mkdirp yes
:END:
*** Re-Color Pages

Uncomment the first line if you want to have the the pages recolored by default.

#+begin_src conf
#set recolor true
set recolor-darkcolor "#ebdbb2"
set recolor-lightcolor "#000000"
#+end_src

*** Highlighting

#+begin_src conf
set highlight-color "#b16286"
set highlight-active-color "#458588"
set highlight-transparency 0.75
#+end_src

* GNU/Emacs Configuration
:PROPERTIES:
:header-args:emacs-lisp: :tangle ./init.el
:END:
** Internal Configuration

All configuration found under here use internal packages from within emacs. This is why they all have =:ensure nil= set.

*** Garbage Collector Hooks

Supposedly makes the startup a bit more effecient. We also revert the changes to the GC via a hook once the startup has completed.

#+begin_src emacs-lisp
(defvar file-name-handler-alist-original file-name-handler-alist)

(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6
      file-name-handler-alist nil
      site-run-file nil)

(defvar zamlz/gc-cons-threshold 100000000)

(add-hook 'emacs-startup-hook ; hook run after loading init files
          (lambda ()
            (setq gc-cons-threshold zamlz/gc-cons-threshold
                  gc-cons-percentage 0.1
                  file-name-handler-alist file-name-handler-alist-original)))

(add-hook 'minibuffer-setup-hook (lambda ()
                                   (setq gc-cons-threshold (* zamlz/gc-cons-threshold 2))))
(add-hook 'minibuffer-exit-hook (lambda ()
                                  (garbage-collect)
                                  (setq gc-cons-threshold zamlz/gc-cons-threshold)))
#+end_src

*** Package Management

Setup the package manager for use later on downstream.

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("org"   . "https://orgmode.org/elpa/"))
(add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
(setq package-enable-at-startup nil)
(package-initialize)

;; Setting up the package manager. Install if missing.
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-and-compile
  (setq use-package-always-ensure t))
#+end_src

*** Basic UI Changes

Lets get some basic settings out of the way here.

#+begin_src emacs-lisp
(use-package emacs
  :preface
  (defvar zamlz/indent-width 4)   ; tab size
  (defvar zamlz/default-screen-width 100)
  :config
  (setq ring-bell-function 'ignore       ; minimise distraction
        frame-resize-pixelwise t
        default-directory "~/")

  (tool-bar-mode -1)          ; Disable the toolbar
  (menu-bar-mode -1)          ; disable the menubar
  ;; (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (blink-cursor-mode 1)       ; Let the cursor be blinking
  (semantic-mode 1)

  ;; better scrolling experience
  (setq scroll-margin 0
        scroll-conservatively 101 ; > 100
        scroll-preserve-screen-position t
        auto-window-vscroll nil)

  ;; Always use spaces for indentation
  (setq-default indent-tabs-mode nil
                tab-width zamlz/indent-width
                fill-column zamlz/default-screen-width))
#+end_src

*** Setup Personal Inf

#+begin_src emacs-lisp
(setq user-full-name "Amlesh Sivanantham")
(setq user-login-name "zamlz")
#+end_src

*** Disable Default Startup

Original startup is hideous...

#+begin_src emacs-lisp
(use-package "startup"
  :ensure nil
  :config (setq inhibit-startup-screen t))
#+end_src

*** Modernize Selection Behaviour

Replaces active region just by typing text (is this true in visual mode as well?)

#+begin_src emacs-lisp
(use-package delsel
  :ensure nil
  :config (delete-selection-mode +1))
#+end_src

*** Disable Scroll-Bar

#+begin_src emacs-lisp
(use-package scroll-bar
  :ensure nil
  :config (scroll-bar-mode -1))
#+end_src

*** Enable Column Numbers

#+begin_src emacs-lisp
(use-package simple
  :ensure nil
  :config
  (column-number-mode +1)
  (global-display-line-numbers-mode t))

;; DONT display line numbers in certain modes
(dolist (mode '(term-mode-hook
                shell-mode-hook
                eshell-mode-hook
                vterm-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

*** Split and Follow Windows

#+begin_src emacs-lisp
(use-package "window"
  :ensure nil
  :preface
  (defun zamlz/split-and-follow-horizontally ()
    "Split window below."
    (interactive)
    (split-window-below)
    (other-window 1))
  (defun zamlz/split-and-follow-vertically ()
    "Split window right."
    (interactive)
    (split-window-right)
    (other-window 1))
  :config
  (global-set-key (kbd "C-x 2") #'zamlz/split-and-follow-horizontally)
  (global-set-key (kbd "C-x 3") #'zamlz/split-and-follow-vertically))
#+end_src

*** Backup and Autosave Files

Emacs decides to save backup files and lockfiles within the same directory as the files we are editing. Thats just ugly when looking at the filesystem. This will fix that.

   #+begin_src emacs-lisp
   (use-package files
     :ensure nil
     :config
     (setq create-lockfiles nil ; don't create .# files (crashes 'npm start')
           backup-directory-alist `(("." . "~/.emacs.d/backup"))))
   #+end_src

*** Auto-Refresh Changes from External Buffers

Auto refresh changes from outsides buffers. What more needs to be said.

#+begin_src emacs-lisp
(use-package autorevert
  :ensure nil
  :config
  (global-auto-revert-mode +1)
  (setq auto-revert-interval 2
        auto-revert-check-vc-info t
        global-auto-revert-non-file-buffers t
        auto-revert-verbose nil))
#+end_src

*** Eldoc Documentation

Slightly shorten the Eldoc display delay

#+begin_src emacs-lisp
(use-package eldoc
  :ensure nil
  :diminish eldoc-mode
  :config
  (setq eldoc-idle-delay 0.4))
#+end_src

*** Mouse Wheel Scroll Speed

#+begin_src emacs-lisp
(use-package mwheel
  :ensure nil
  :config (setq mouse-wheel-scroll-amount '(2 ((shift) . 1))
                mouse-wheel-progressive-speed nil))
#+end_src

*** Highlight Matching Parentheses

#+begin_src emacs-lisp
(use-package paren
  :ensure nil
  :init (setq show-paren-delay 0)
  :config (show-paren-mode +1))
#+end_src

*** Auto-pairing Quotes and Parentheses

Super useful for auto-pairing certain characters. However we should make use of a hook to prevent it for left carrot bracket in org-mode buffers

#+begin_src emacs-lisp
(use-package elec-pair
  :ensure nil
  :hook
  (prog-mode . electric-pair-mode)
  ;; disable <> auto-pairing in org-mode buffers
  (org-mode  . (lambda ()
    (setq-local electric-pair-inhibit-predicate
                `(lambda (c)
                   (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c)))))))
#+end_src

*** Clean Whitespace on Buffer Save

#+begin_src emacs-lisp
(use-package whitespace
  :ensure nil
  :hook (before-save . whitespace-cleanup))
#+end_src

*** Dump Custom-Set-Variables

#+begin_src emacs-lisp
(use-package cus-edit
  :ensure nil
  :config
  (setq custom-file (concat user-emacs-directory "to-be-dumped.el")))
#+end_src

*** Dired Customization

#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :after evil-collection
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom ((dired-listing-switches "-lahF --group-directories-first"))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer))
#+end_src

** UI Customization
*** Startup Dashboard

The default landing page isn't quite nice. I originally had it configured to display the scratch page, but then I really wanted like a menu to quickly access my stuff.

#+begin_src emacs-lisp
;; no default startup screen!
;; (setq inhibit-startup-message t)

;; Enable custom dashboard
(use-package dashboard
  :ensure t
  :config
  (setq dashboard-startup-banner "~/lib/emacs-themes/navi.png")
  (setq dashboard-center-content t)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-navigator t)
  (setq dashboard-set-init-info t)
  (setq initial-buffer-choice (lambda() (get-buffer "*dashboard*")))
  (setq dashboard-items '())
  (dashboard-modify-heading-icons '((bookmarks . "book")))
  (dashboard-setup-startup-hook))
#+end_src

*** Font Configuration

I have a lot of fonts commented out right now because I can't decide on which ones to keep lol.

#+begin_src emacs-lisp
(defun zamlz/set-font-faces ()
  ;; Set default face
  ;; (set-face-attribute 'default nil :font "xos4 Terminus" :height 110)
  ;; (set-face-attribute 'default nil :font "Fira Code" :height 100)
  ;; (set-face-attribute 'default nil :font "Dina" :height 100)
  (set-face-attribute 'default nil :font "Iosevka Term" :height 110)
  ;; (set-face-attribute 'default nil :font "Source Code Pro" :height 100)

  ;; Set the fixed pitch face
  ;; (set-face-attribute 'fixed-pitch nil :font "xos4 Terminus" :height 100)

  ;; Set the variable pitch face
  ;; (set-face-attribute 'variable-pitch nil :font "Fira Code" :height 100)
  )
#+end_src

*** Keybinding Configuration

Former vim user and the best thing about vim is the keybindings. It's a good thing that there are so many evil packages in emacs.

**** ESC should save the day

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

**** Evil Mode

This is the core of =Evil-Mode=. This basicallly adds the modal functionality to emacs that we see in vim. But we also add a little bit of our own custom bindings not set by default that were present in vim for the sake of my sanity.

#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init (setq evil-want-keybinding nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  ;; C-h is help in normal mode, but becomes BACKSPACE in insert mode
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src

**** Extend Evil Mode with Evil Collection

Unfortunately, =Evil-Mode= is only enabled in text buffers. This means that in special buffers spawned by packages like =Magit=, =Org=, etc., we would not be able to use vim-like bindings. The package below aims to provide even more functionality to these other non-trivial modes.

#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :ensure t
  :config (evil-collection-init))
#+end_src

**** Evil Commentary

Adds keybindings for quick commenting. Use =gcc= to comment out a line, use =gcap= to comment out a paragraph, use =gc= in visual mode to comment out a selection.

#+begin_src emacs-lisp
(use-package evil-commentary
  :after evil
  :diminish
  :config (evil-commentary-mode +1))
#+end_src

**** Which Key

Spawns a simple UI panel that shows available keybindings based on what keys I've pressed so far.

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config (setq which-key-idle-delay 0.1))
#+end_src

**** General Keybinder

This is an interesting package. It basically lets me define my own keybinding space and configure it to run various commands as I see fit.

#+begin_src emacs-lisp
(use-package general
  :config
  (general-create-definer zamlz/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC"))
#+end_src

**** Hydra

Hydra lets me also define functions that can very quickly let me do various tasks in quick succession. I will be using this a lot of =general= I imagine.

#+begin_src emacs-lisp
(use-package hydra)
#+end_src

*** Leader Keybindings

I chose not to put this in the previous section because I feel like this might grow alot and its also its own unique space. This where my custom functions that get bound to various keys will be assigned via =General=.

**** Misc Shortcuts

These are just random shorts to emacs built-in commands that I'd like access to as a keybinding.

#+begin_src emacs-lisp
(zamlz/leader-keys
 "t"  '(:ignore t :which-key "toggles")
 "tt" '(counsel-load-theme :which-key "choose theme"))
#+end_src

**** Text Size Scaling

Adds a =Hydra= function to =General= to control the size of the font face.

#+begin_src emacs-lisp
(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

;; Add hydra func to our personal keybindings
(zamlz/leader-keys
  "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src

*** Ivy, Counsel and Swiper
**** Ivy

=Ivy= is basically a completion framework. Its minimal but provides a simple but powerful menu that appears when switching files, opening buffers, etc.

#+begin_src emacs-lisp
(use-package ivy
  :defer 0.1
  :diminish
  :bind (("C-x B" . ivy-switch-buffer-other-window)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :custom
  (ivy-count-format "(%d/%d) ")
  (ivy-use-virtual-buffers t)
  :config (ivy-mode))
#+end_src

**** Counsel

=Counsel= on the other hand, provides replaces commands that replace the typical emacs commands.

#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :bind (("M-x"     . counsel-M-x)
         ("M-y"     . counsel-yank-pop)
         ("C-x b"   . counsel-switch-buffer)
         ("C-x C-f" . counsel-find-file)
         ("C-x C-M-f" . counsel-find-file-extern)
         ("C-x C-l" . counsel-locate)
         ("C-x C-M-l" . counsel-locate-action-extern)
         ("C-x C-i" . counsel-semantic-or-imenu)
         :map minibuffer-local-map
         ("C-r"     . 'counsel-minibuffer-history))
  :config (counsel-mode))
#+end_src

**** Swiper

#+begin_src emacs-lisp
;; TODO: Figure out what swiper is lol
(use-package swiper
  :after counsel
  :bind (("C-s" . swiper)))
#+end_src

**** Ivy Rich

=Ivy-Rich= provides extra columns in the counsel commands to get more information about each item during autocompletion.

#+begin_src emacs-lisp
;; Adds nice icons to the ivy rich buffer
(use-package all-the-icons-ivy-rich
  :after counsel-projectile
  :init (all-the-icons-ivy-rich-mode 1))

;; Actually install ivy rich
(use-package ivy-rich
  :after (ivy all-the-icons-ivy-rich)
  :init (ivy-rich-mode 1))
#+end_src

*** Helm Incremental Completion Framework

Trying out helm. Got most of the stuff on how this works from [[https://tuhdo.github.io/helm-intro.html][this guide]].

#+begin_src emacs-lisp
;; (use-package helm
;;   :bind (
;;          ("M-x"     . helm-M-x)
;;          ("C-s"     . helm-occur)
;;          ("C-x b"   . helm-mini)
;;          ("C-x C-f" . helm-find-files)
;;          ("C-x r b" . helm-bookmarks)
;;          ("M-y"     . helm-show-kill-ring)
;;          ("C-c h"   . helm-command-prefix)
;;          ("C-c h i" . helm-semantic-or-imenu)
;;          :map helm-map
;;          ("<tab>" . helm-execute-persistent-action) ; rebind tab to run persistent action
;;          ("C-i"   . helm-execute-persistent-action) ; make TAB work in terminal
;;          ("C-z"   . helm-select-action) ; list actions using C-z
;;          )
;;   :custom
;;   ; max height for the helm buffer
;;   (helm-autoresize-max-height 30)
;;   ; min height for the helm buffer
;;   (helm-autoresize-min-height 0)
;;   ; open helm buffer inside current window, not occupy whole other window
;;   (helm-split-window-in-side-p t)
;;   ; move to end or beginning of source when reaching top or bottom of source.
;;   ;; (helm-move-to-line-cycle-in-source t)
;;   ; search for library in `require' and `declare-function' sexp.
;;   (helm-ff-search-library-in-sexp t)
;;   ; scroll 8 lines other window using M-<next>/M-<prior>
;;   (helm-scroll-amount 8)
;;   ;; use recentf-list for recent files
;;   (helm-ff-file-name-history-use-recentf t)
;;   ;; show current input in header line
;;   (helm-echo-input-in-header-line t)
;;   ;; enable fuzzy searching in semantic-or-imenu
;;   (helm-semantic-fuzzy-match t)
;;   (helm-imenu-fuzzy-match t)
;;   ;; enable fuzzy matching in buffer list
;;   (helm-buffers-fuzzy-matching t)
;;   (helm-recentf-fuzzy-match t)
;;   :config
;;   (require 'helm-config)
;;   ;; Use curl when found
;;   (when (executable-find "curl")
;;     (setq helm-google-suggest-use-curl-p t))
;;   (helm-autoresize-mode 1)
;;   (helm-mode 1))

;; ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
;; ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
;; ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
;; ;;(global-set-key (kbd "C-c h") 'helm-command-prefix)
;; (global-unset-key (kbd "C-x c"))
#+end_src

*** Helm Describe Bindings

A useful package for figuring out what bindings there is in a particular major/minor mode.

#+begin_src emacs-lisp
;; (use-package helm-descbinds
;;   :bind (("C-h b" . helm-descbinds)))
#+end_src

*** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Wilfred/helpful]] improves the documentation shown when running one of emacs's =describe-*= functions.

#+begin_src emacs-lisp
(use-package helpful
  :ensure t
  ; This is only needed if I'm still using counsel
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ;; Note that the built-in `describe-function' includes both functions
  ;; and macros. `helpful-function' is functions only, so we provide
  ;; `helpful-callable' as a drop-in replacement.
  ([remap describe-function] . helpful-callable)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key]      . helpful-key)
  ([remap describe-command]  . helpful-command)
  ("C-c C-d"                 . helpful-at-point)
  ("C-h F"                   . helpful-function)
  )
#+end_src

*** Themes and Appearance
**** Modeline

To use =Doom-Modeline=, we need to have some custom icons installed. However, they must be manually installed via the following command (=M-x all-the-icons-install-fonts=)

#+begin_src emacs-lisp
(use-package all-the-icons)

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+end_src

**** Color Theme

I have a couple themes here. Eventually I want to setup my own custom theme but for now this will have to do.

#+begin_src emacs-lisp
(use-package autothemer
  :ensure t)

(add-to-list 'custom-theme-load-path "~/lib/emacs-themes/")
(load-theme 'gruvbox-black t)

;; (use-package doom-themes
;;   :config
;;   ;; Global settings (defaults)
;;   (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
;;         doom-themes-enable-italic t) ; if nil, italics is universally disabled
;;   (load-theme 'doom-nord t)
;;   ;; Enable flashing mode-line on errors
;;   (doom-themes-visual-bell-config)
;;   ;; Enable custom neotree theme (all-the-icons must be installed!)
;;   (doom-themes-neotree-config)
;;   ;; or for treemacs users
;;   (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
;;   (doom-themes-treemacs-config)
;;   ;; Corrects (and improves) org-mode's native fontification.
;;   (doom-themes-org-config))

;;(use-package gruvbox-theme
;;  :init (load-theme 'gruvbox-dark-hard t))

;; (set-background-color "black")

;; (use-package spacemacs-theme
;;   :defer t
;;   :init (load-theme 'spacemacs-dark t))

;; (load-theme 'xresources t)

;; (use-package seti-theme
;;   :defer t
;;   :init (load-theme 'seti t))
#+end_src

**** Rainbow Delimiters

Normally I don't like rainbow delimiters but its actually pretty good on emacs. And you actually can't survive without it IMO.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

**** Syntax Highlighting

#+begin_src emacs-lisp
(use-package highlight-numbers
  :hook (prog-mode . highlight-numbers-mode))

(use-package highlight-escape-sequences
  :hook (prog-mode . hes-mode))
#+end_src

**** Rainbow Mode

#+begin_src emacs-lisp
(use-package rainbow-mode
  :init (rainbow-mode))
#+end_src

**** Transparency

#+begin_src emacs-lisp
;; Set transparency of emacs
(defun zamlz/set-transparency (value)
  "Sets the transparency of the frame window. 0=transparent/100=opaque"
  (interactive "nTransparency Value 0 - 100 opaque:")
  (set-frame-parameter (selected-frame) 'alpha value))

;; Add the transparency function to my leader keys
(zamlz/leader-keys
  "tx" '(zamlz/set-transparency :which-key "Set transparency"))

;; Set the default transparency
(zamlz/set-transparency 80)
#+end_src

*** Dired Improvements
**** Single Dired Buffer

This doesn't prevent dired from having multiple buffers open at once, rather, it forces dired to not create a new buffer whenever a new directory is open.

#+begin_src emacs-lisp
(use-package dired-single)
#+end_src

**** Icons for Dired

#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

**** Hide Dotfiles

Hide hidden files from dired buffers (toggleable)

#+begin_src emacs-lisp
(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "H" 'dired-hide-dotfiles-mode))
#+end_src

*** Daemon and Client Hooks

#+begin_src emacs-lisp
(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (setq doom-modeline-icon t)
                (with-selected-frame frame
                  (zamlz/set-font-faces)
                  (zamlz/set-transparency 80))))
  (zamlz/set-font-faces))
#+end_src

** Development and Project Management

Language specific and Project Management related configurations here...

*** Languages
**** Language Server Protocol

Powerful languages server protocols that were designed originally for visual studio code in order to created a unified protocol for getting functionality of the langauge from within the editor.

#+begin_src emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t))
#+end_src

**** Python

#+begin_src emacs-lisp
(use-package python
  :ensure nil
  :hook (python-mode . lsp-deferred)
  :config (setq python-indent-offset zamlz/indent-width))
#+end_src

**** C/C++/Java

Sets the formatting style for C/C++/Java from GNU (default) to the popular standard K&R.

#+begin_src emacs-lisp
(use-package cc-vars
  :ensure nil
  :config
  (setq-default c-basic-offset zamlz/indent-width)
  (setq c-default-style '((java-mode . "java")
                          (awk-mode . "awk")
                          (other . "k&r"))))
#+end_src

*** Company Auto-Completion for Programming Languages

Use =C-n= and =C-p= to navigate tooltip

#+begin_src emacs-lisp
(use-package company
  :diminish company-mode
  :hook (prog-mode . company-mode)
  :config
  (setq company-minimum-prefix-length 1
        company-idle-delay 0.1
        company-selection-wrap-around t
        company-tooltip-align-annotations t
        ; show tooltip even for single candidate
        company-frontends '(company-pseudo-tooltip-frontend
                            company-echo-metadata-frontend))
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous)
    (define-key company-active-map (kbd "RET") 'company-complete-selection)
    (define-key company-active-map (kbd "TAB") 'company-complete-common)))
#+end_src

*** Flycheck Syntax Linter

#+begin_src emacs-lisp
(use-package flycheck
  :config (global-flycheck-mode +1))
#+end_src

*** Projectile

Provides useful integration to a variety of project formats. Able to automatically identify project directories and can be configured to build, run unit-tests, etc. Need to explore this more.

#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/src")
(setq projectile-project-search-path '("~/src")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src

*** Magit Git Interface

Git interface for emacs. Very quickly run git commands and evaluate diffs, etc.

#+begin_src emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status)
  :config (add-hook 'with-editor-mode-hook #'evil-insert-state))
#+end_src

*** Forge

Package provides integration to upstream GitHub, GitLab APIs and more. Setting this up would let me merge/review pull requests, create/address issues, etc. from within emacs.

#+begin_src emacs-lisp
;; (use-package forge)
#+end_src

*** Markdown Mode

#+begin_src emacs-lisp
(use-package markdown-mode
  :hook (markdown-mode . visual-line-mode))
#+end_src

*** Web Mode

Useful mode for editing web based files

#+begin_src emacs-lisp
(use-package web-mode
  :mode (("\\.html?\\'" . web-mode)
         ("\\.css\\'"   . web-mode)
         ("\\.jsx?\\'"  . web-mode)
         ("\\.tsx?\\'"  . web-mode)
         ("\\.json\\'"  . web-mode))
  :config
  (setq web-mode-markup-indent-offset 2) ; HTML
  (setq web-mode-css-indent-offset 2)    ; CSS
  (setq web-mode-code-indent-offset 2)   ; JS/JSX/TS/TSX
  (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))
#+end_src

** Org Mode

This is what emacs is about! And setting this up is crucial. There are quite a bit of configurable parts.

*** Better Font Faces Hook

We can configure =org-mode= font faces via a seperate function that we define. We need to add it as a hook afterwards however which is why this section appears before the basic configuration.

#+begin_src emacs-lisp
(defun zamlz/org-font-setup ()
  ;; Converts bullet lists to not use the - character but the • character
  (font-lock-add-keywords 'org-mode
    '(("^ *\\([-]\\) "
       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; ;; Set faces for heading levels
  ;; ;; for now, keep all at 1.0
  ;; (dolist (face '((org-level-1 . 3.0)
  ;;   (org-level-2 . 2.5)
  ;;   (org-level-3 . 2.0)
  ;;   (org-level-4 . 1.5)
  ;;   (org-level-5 . 1.0)
  ;;   (org-level-6 . 1.0)
  ;;   (org-level-7 . 1.0)
  ;;   (org-level-8 . 1.0)))
  ;;   (set-face-attribute (car face) nil
  ;;                       :font "Fira Code"
  ;;                       :weight 'regular
  ;;                       :height (cdr face)))

  ;;   ;; ensure that anything that should be fixed-width in org appears that way
  ;; (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  ;; (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch)
  ;; (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  ;; (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  ;; (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  ;; (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  ;; (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
  )
#+end_src

*** Mode Startup Hooks

These are some hooks that we would like to run when =org-mode= is started.

#+begin_src emacs-lisp
(defun zamlz/org-mode-setup ()
  (org-indent-mode)
  (org-make-toc-mode)
  ;; (variable-pitch-mode 1)
  (visual-line-mode +1)
  (setq evil-auto-indent nil)
  (setq fill-column 10000000))
#+end_src

*** Basic Configuration

I should probably split this bloody mess up.

#+begin_src emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :hook ((org-mode . zamlz/org-mode-setup))
  :custom

  ;; Setup directories
  (org-directory "~/org/gtd/")
  (org-agenda-files (list org-directory))

  ;; Add some nice visuals changes
  (org-ellipsis " ▾")

  ;; Some todo/logging changes
  (org-enforce-todo-dependencies t)
  (org-log-done t)
  (org-log-into-drawer t)
  (org-treat-S-cursor-todo-selection-as-state-change nil)

  ;; Setup org capture mode
    ;; Setup refiling
  (org-log-refile t)
  (org-refile-use-outline-path 'file)
  (org-outline-path-complete-in-steps nil)
  (org-refile-allow-creating-parent-nodes 'confirm)
  (org-refile-targets
   `((,(concat org-directory "/gtd.org") :maxlevel . 1)))

  ;; Setup archive location
  (org-archive-location (concat org-directory "/archive.org::"))

  ;; ensure that refiling saves buffers
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  ;; Make sure we display inline images by default
  (org-startup-with-inline-images t)

  ;; Finally a post setup func to setup fonts
  (zamlz/org-font-setup))
#+end_src

*** Task Categories

#+begin_src emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "|" "DONE(d)")
              (sequence "ROUTINE(r)" "|" "DONE(d)")
              (sequence "PROJECT(p)" "|" "COMPLETED(d)" "CANCELLED(c)")
              (sequence "WAITING(w)" "|")
              (sequence "|" "CANCELLED(c)")
              (sequence "SOMEDAY(s)" "|" "CANCELLED(c)")
              (sequence "MEETING(m)" "|"))))
#+end_src

*** Task Colors

The first version here works nice with the =doom-nord= theme. The second version here works better with my custom gruvbox theme.

#+begin_src emacs-lisp
;; (setq org-todo-keyword-faces
;;   '(("DONE"      . (:background "#98be65" :foreground "#ffffff" :weight bold))
;;     ("TODO"      . (:background "#ff6c6b" :foreground "#ffffff" :weight bold))
;;     ("ROUTINE"   . (:background "#3f444a" :foreground "#51afef" :weight bold))
;;     ("PROJECT"   . (:background "#51afef" :foreground "#ffffff" :weight bold))
;;     ("COMPLETED" . (:background "#98be65" :foreground "#ffffff" :weight bold))
;;     ("WAITING"   . (:background "#3f444a" :foreground "#ffffff" :weight bold))
;;     ("CANCELLED" . (:background "#181818" :foreground "#ffffff" :weight bold))
;;     ("SOMEDAY"   . (:background "#3f444a" :foreground "#ffffff" :weight bold))
;;     ("MEETING"   . (:background "#a9a1e1" :foreground "#ffffff" :weight bold))))
#+end_src

#+begin_src emacs-lisp
(setq org-todo-keyword-faces
  '(("DONE"      . (:background "#b8bb26" :foreground "#000000" :weight bold))
    ("TODO"      . (:background "#fb4934" :foreground "#000000" :weight bold))
    ("ROUTINE"   . (:background "#689d6a" :foreground "#000000" :weight bold))
    ("PROJECT"   . (:background "#458588" :foreground "#000000" :weight bold))
    ("COMPLETED" . (:background "#b8bb26" :foreground "#000000" :weight bold))
    ("WAITING"   . (:background "#d79921" :foreground "#000000" :weight bold))
    ("CANCELLED" . (:background "#181818" :foreground "#fb4934" :weight bold))
    ("SOMEDAY"   . (:background "#3f444a" :foreground "#000000" :weight bold))
    ("MEETING"   . (:background "#b16286" :foreground "#000000" :weight bold))))

#+end_src

*** Better Heading Bullets

The default bullets are asteriks and thats just plain ugly. We change it to some nice unicode characters. I should also look into =org-superstar-mode= as well at some point.

#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "●" "○" "●" "○" "●" "○")))
  ;; (org-bullets-bullet-list '("◇")))
#+end_src

*** Center Org buffers

Center the org buffers and remove line numbers to reduce visual clutter.

#+begin_src emacs-lisp
(defun zamlz/org-mode-visual-fill ()
  (setq visual-fill-column-width zamlz/default-screen-width
        ;; visual-fill-column-extra-text-width (0 . 1000)
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

 (use-package visual-fill-column
   :hook (org-mode . zamlz/org-mode-visual-fill))
#+end_src

*** Org Keybindings
**** Default Keybindings

Just some keybindings to access various =org-mode= commands.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
#+end_src

**** Org Mode Quick Access

Just quick access to my most used org-mode functions via the leader key.

#+begin_src emacs-lisp
(zamlz/leader-keys
  "o"  '(:ignore t :which-key "Org Mode")
  "oa" '(org-agenda-list :which-key "Org Agenda Weekly View")
  "oo" '(org-capture :which-key "Org Capture Templates")
  "oi" '((lambda () (interactive)
           (find-file (concat org-directory "/inbox.org"))
           (message "Opened:  %s" (buffer-name)))
         :which-key "Inbox")
  "og" '((lambda () (interactive)
           (find-file (concat org-directory "/gtd.org"))
           (message "Opened:  %s" (buffer-name)))
         :which-key "GTD")
  "oj" '((lambda () (interactive)
           (find-file (concat org-directory "/journal.org"))
           (message "Opened:  %s" (buffer-name)))
         :which-key "Journal"))
#+end_src

*** Org Capture Templates
**** DOCT: Declarative Org Capture Templates

DOCT is a cool package that lets me build =org-capture= templates with ease. It's really way more readable than the original syntax.

#+begin_src emacs-lisp
(use-package doct
  :ensure t
  ;;recommended: defer until calling doct
  :commands (doct))
#+end_src

**** Template Definitions

Org mode template definitions in the doct format

#+begin_src emacs-lisp
(setq org-capture-templates
      (doct '(("Todo, Meetings, Projects and more!" :keys "t"
               :file "inbox.org"
               :type entry
               :prepend t
               :template ("* %{todo-state} %^{Description}"
                          ":PROPERTIES:"
                          ":Created: %U"
                          ":END:"
                          "%?")
               :children (("Todo Task" :keys "t"
                           :todo-state "TODO")
                          ("Routine/Habit" :keys "r"
                           :todo-state "ROUTINE")
                          ("Project Group" :keys "p"
                           :todo-state "PROJECT")
                          ("Someday/Maybe" :keys "s"
                           :todo-state "SOMEDAY")
                          ("Meeting/Appointment" :keys "m"
                           :todo-state "MEETING")
                          ("Todo Task (context)" :keys "i"
                           :todo-state "TODO"
                           :template ("* %{todo-state} %^{Description}"
                                      ":PROPERTIES:"
                                      ":Created: %U"
                                      ":END:"
                                      "%?"
                                      "%i"
                                      "%a"))))
              ("Journal Entries and Data Capture" :keys "j"
               :file "journal.org"
               :type entry
               :datetree t
               :template ("* %U :JOURNAL:%{extra-tags}"
                          "%?")
               :children (("Journal (now)" :keys "j"
                           :extra-tags "REALITY:")
                          ("Journal (dream)" :keys "d"
                           :extra-tags "DREAM:")
                          ("Journal (context)" :keys "i"
                           :template ("* %U :JOURNAL:CONTEXT:"
                                      "%?"
                                      "%i"
                                      "%a")))))))
#+end_src

*** Org Make TOC

Dynamically make table of contents in org files

#+begin_src emacs-lisp
(use-package org-make-toc)
#+end_src

*** Literate Programming with Babel

Babel is basically like jupyter notebooks for =org-mode= but its also way more powerful! Below we also configure quick access structure templates to write src blocks with ease. Babel is already a part of emacs so we must just configure it. To get a list of what languages you can configure for babel, take a look [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][here]]!

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (gnuplot . t)
   (latex . t)
   ))

(setq org-confirm-babel-evaluate nil
  org-src-fontify-natively t
  org-src-strip-leading-and-trailing-blank-lines t
  org-src-preserve-indentation nil
  org-src-tab-acts-natively t
  org-edit-src-content-indentation 0)

;; Setup structure templates for org-babel
(require 'org-tempo)
(add-to-list `org-structure-template-alist '("sh" . "src shell"))
(add-to-list `org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list `org-structure-template-alist '("py" . "src python"))
(add-to-list `org-structure-template-alist '("cf" . "src conf"))
#+end_src

*** Auto-Tangle Configuration File

We make use of =org-babel= here to create our config file. This is currently also checking to my dotfiles in case of system rescue reasons.

#+begin_src emacs-lisp
;; (defun efs/org-babel-tangle-config ()
;;   (when (string-equal (buffer-file-name)
;;                       (expand-file-name "~/etc/emacs/config.org"))
;;     ;; Dynamic scoping to the rescue
;;     (let ((org-confirm-babel-evaluate nil))
;;       (org-babel-tangle))))

;; (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

*** LaTeX Inline Preview

Pretty straightforward except that you need to have =latex= installed and also =dvi2png= as well. Need to figure out how to configure the size of the generated latex image.

#+begin_src emacs-lisp
(setq org-startup-with-latex-preview t)
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.0))
(setq org-preview-latex-image-directory  ".ltximg/")
#+end_src

*** Habit Tracking

Enables habit tracking in =org-mode= via =org-habit=.

#+begin_src emacs-lisp
(add-to-list 'org-modules 'org-habit t)
(setq org-habit-preceding-days 31)
(setq org-habit-following-days 3)
(setq org-habit-show-habits-only-for-today t)
;;(setq org-habit-show-all-today t)
#+end_src

*** Org Download

This package should let me quickly download images from web browsers and have images in my clipboard and paste them into my org files.

#+begin_src emacs-lisp
(use-package org-download
  :custom
  (org-download-image-dir "./data")
  (org-download-heading-lvl nil)
  (org-download-method 'directory))
#+end_src

*** Org Last Modified Timestamp

The following allows any =#+LAST_MODIFIED= headers to be updated on file-save.

#+begin_src emacs-lisp
(defun zamlz/update-org-modified-property ()
  "If a file contains a '#+LAST_MODIFIED' property update it to contain
  the current date/time"
  (interactive)
  (save-excursion
    (widen)
    (goto-char (point-min))
    (when (re-search-forward "^#\\+LAST_MODIFIED:" (point-max) t)
      (progn
        (kill-line)
        (insert (format-time-string " [%Y-%m-%d %a %H:%M:%S]") )))))
#+end_src

It is made available like so.

#+begin_src emacs-lisp
(defun zamlz/org-mode-before-save-hook ()
  (when (eq major-mode 'org-mode)
    (zamlz/update-org-modified-property)))

(add-hook 'before-save-hook #'zamlz/org-mode-before-save-hook)
#+end_src

*** Roam Notes

=org-roam= is a useful package for taking notes.

#+begin_src emacs-lisp
(setq org-roam-directory "~/org/")

(use-package org-roam
  :ensure t
  :hook (after-init . org-roam-mode)
  :bind (:map org-roam-mode-map
         (("C-c n l" . org-roam)
         ("C-c n f" . org-roam-find-file)
         ("C-c n g" . org-roam-graph))
         :map org-mode-map
         (("C-c n i" . org-roam-insert))
         (("C-c n I" . org-roam-insert-immediate))))
#+end_src

*** Roam Capture Templates

#+begin_src emacs-lisp
(setq org-roam-capture-templates
      `(("d" "default" plain (function org-roam--capture-get-point)
         "\n%?"
         :file-name "%<%Y%m%d%H%M%S>-${slug}"
         :head ,(concat "#+TITLE: ${title}\n"
                        "#+AUTHOR: %n (%(user-login-name))\n"
                        "#+ROAM_TAGS:\n"
                        "#+ROAM_ALIAS:\n"
                        "#+CREATED: %U\n"
                        "#+LAST_MODIFIED: %U\n")
         :unnarrowed t)
        ("i" "infrastructure" plain (function org-roam--capture-get-point)
         "\n%?"
         :file-name "infrastructure/%<%Y%m%d%H%M%S>-${slug}"
         :head ,(concat "#+TITLE: ${title}\n"
                        "#+AUTHOR: %n (%(user-login-name))\n"
                        "#+ROAM_TAGS: INFRASTRUCTURE\n"
                        "#+ROAM_ALIAS:\n"
                        "#+CREATED: %U\n"
                        "#+LAST_MODIFIED: %U\n")
         :unnarrowed t)
        ("c" "contacts" plain (function org-roam--capture-get-point)
         "\n%?"
         :file-name "contacts/%<%Y%m%d%H%M%S>-${slug}"
         :head ,(concat "#+TITLE: ${title}\n"
                        "#+AUTHOR: %n (%(user-login-name))\n"
                        "#+ROAM_TAGS: CONTACTS\n"
                        "#+ROAM_ALIAS:\n"
                        "#+CREATED: %U\n"
                        "#+LAST_MODIFIED: %U\n")
         :unnarrowed t)
        ("w" "webpage" plain (function org-roam--capture-get-point)
         "\n%?"
         :file-name "webpages/%<%Y%m%d%H%M%S>-${slug}"
         :head ,(concat "#+TITLE: ${title}\n"
                        "#+AUTHOR: %n (%(user-login-name))\n"
                        "#+ROAM_TAGS: WEBPAGE\n"
                        "#+ROAM_ALIAS:\n"
                        "#+CREATED: %U\n"
                        "#+LAST_MODIFIED: %U\n"
                        "#+ROAM_KEY: %x\n")
         :unnarrowed t)
        ))
#+end_src

*** Roam Daily Notes

#+begin_src emacs-lisp
(setq org-roam-dailies-directory "journal/")

(setq org-roam-dailies-capture-templates
      `(("d" "default" entry
         #'org-roam-capture--get-point
         "* %U\n%?"
         :file-name "journal/%<%Y-%m-%d>"
         :head ,(concat "#+TITLE: %<[%Y-%m-%d] %B %e, %Y (%A)>\n"
                        "#+ROAM_TAGS: JOURNAL\n"
                        "#+ROAM_ALIAS: %<%Y-%m-%d>\n"
                        "#+CREATED: %U\n"
                        "#+LAST_MODIFIED: %U\n"
                        "\n"))
        ))
#+end_src

*** Roam Quick Access

#+begin_src emacs-lisp
(zamlz/leader-keys
  "n"  '(:ignore t :which-key "Org Roam Notes")
  "nj" '(org-roam-dailies-capture-today :which-key "Roam Daily Capture Today")
  "ny" '(org-roam-dailies-capture-yesterday :which-key "Roam Daily Capture Yesterday"))
#+end_src

*** Roam Server

=org-roam-server= provides a useful way to view my notes in a graph like view. I can also open them from this view as well.

#+begin_src emacs-lisp
(use-package org-roam-server
  :ensure t
  :custom
  (org-roam-server-host "127.0.0.1"
   org-roam-server-port 8080
   org-roam-server-authenticate nil
   org-roam-server-export-inline-images t
   org-roam-server-serve-files t
   org-roam-server-served-file-extensions '("pdf" "mp4" "ogv" "png" "svg")
   org-roam-server-network-poll t
   org-roam-server-network-arrows t
   org-roam-server-network-label-truncate t
   org-roam-server-network-label-truncate-length 60
   org-roam-server-network-label-wrap-length 20)
  :init
  (org-roam-server-mode))
#+end_src

** Misc Packages
*** Vterm

Installs a better virtual terminal to use within emacs. I'm just playing around with this for now.

#+begin_src emacs-lisp
(use-package vterm
  :custom
  ;; (vterm-shell "/bin/fish")
  (vterm-ignore-blink-cursor nil)
  (vterm-buffer-name-string "vterm [%s]")
  (vterm-always-compile-module t))

(zamlz/leader-keys
  "e" '(:ignore t :which-key "Exec Commands")
  "ee" '(vterm :which-key "Spawn vterm instance"))
#+end_src

*** Ledger

#+begin_src emacs-lisp
(use-package ledger-mode)
#+end_src

*** Beancount

Beancount is a plain text accounting ledger-like program that I've been experimenting with. This simply just adds the mode via **on-disk** extension. If the extension is missing, emacs will complain. Make sure to pull it from the repo!

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/beancount-mode")
(require 'beancount)
(add-to-list 'auto-mode-alist '("\\.lgr\\'" . beancount-mode))
(add-hook 'beancount-mode-hook #'outline-minor-mode)
#+end_src

*** xkcd

A simple plugin for getting the today's xkcd comic.

#+begin_src emacs-lisp
(use-package xkcd)
#+end_src
